#!/usr/bin/env perl
# BEGIN BPS TAGGED BLOCK {{{
#
# COPYRIGHT:
#
# This software is Copyright (c) 1996-2022 Best Practical Solutions, LLC
#                                          <sales@bestpractical.com>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# END BPS TAGGED BLOCK }}}
# Portions Copyright 2002 Autrijus Tang <autrijus@autrijus.org>

use strict;
use warnings;

use open qw/ :std :encoding(UTF-8) /;

use Locale::PO;

use lib 'lib';
use RT::I18N::Extract;

$| = 1;

# po dir is for extensions
@ARGV = (<share/po/*.po>, <share/po/*.pot>, <po/*.po>, <po/*.pot>) unless @ARGV;

# extract all strings and stuff them into %POT
# scan html dir for extensions
my $extract = RT::I18N::Extract->new;
our %POT = $extract->all;

print "$_\n" for $extract->errors;

# update all language dictionaries
foreach my $dict (@ARGV) {
    $dict = "share/po/$dict.pot" if ( $dict eq 'rt' );
    $dict = "share/po/$dict.po" unless -f $dict or $dict =~ m!/!;

    my $lang = $dict;
    $lang =~ s|.*/||;
    $lang =~ s|\.po$||;
    $lang =~ s|\.pot$||;

    update($lang, $dict);
}


sub uniq {
    my %seen;
    return grep { !$seen{$_}++ } @_;
}

sub update {
    my $lang = shift;
    my $file = shift;

    unless (!-e $file or -w $file) {
        warn "Can't write to $lang, skipping...\n";
        return;
    }

    my $is_english = ( $lang =~ /^en(?:[^A-Za-z]|$)/ );

    print "Updating $lang";
    my $lexicon = Locale::PO->load_file_ashash( $file, "utf-8" );

    # Default to the empty string for new ones
    $lexicon->{$_->msgid} ||= $_
        for values %POT;

    my $errors = 0;
    for my $msgid ( keys %{$lexicon} ) {
        my $entry = $lexicon->{$msgid};

        # Don't output empty translations for english
        if (not length $entry->dequote($entry->msgstr) and $is_english) {
            delete $lexicon->{$msgid};
            next;
        }

        # The PO properties at the top are always fine to leave as-is
        next if not length $entry->dequote($msgid);

        # Not found in source?  Drop it
        my $source = $POT{$msgid};
        if (not $source) {
            delete $lexicon->{$msgid};
            next;
        }

        # Pull in the properties from the source
        $entry->reference( $source->reference );
        $entry->automatic( $source->automatic );

        my $fail = validate_msgstr($lang,
                                   map {$entry->dequote($_)}
                                       $entry->msgid, $entry->msgstr);
        next unless $fail;
        print "\n" unless $errors++;
        print $fail;
    }

    my @order = map {$_->[0]}
                sort {$a->[1] cmp $b->[1]}
                map {[$_, $_->dequote($_->msgid)]}
                values %{$lexicon};

    Locale::PO->save_file_fromarray($file, \@order, "utf-8")
          or die "Couldn't update '$file': $!";

    if ($errors) {
        print "\n";
    } else {
        print "\r", " "x100, "\r";
    }
    return 1;
}

sub validate_msgstr {
    my $lang   = shift;
    my $msgid  = shift;
    my $msgstr = shift;

    return if not defined $msgstr or $msgstr eq ''; # no translation for this string

    # we uniq because a string can use a placeholder more than once
    # (eg %1 %quant(%1, ...) like in our czech localization
    my @expected_variables = uniq($msgid =~ /%\d+/g);
    my @got_variables = uniq($msgstr =~ /%\d+/g);

    # this catches the case where expected uses %1,%2 and got uses %1,%3
    # unlike a simple @expected_variables == @got_variables
    my $expected = join ", ", sort @expected_variables;
    my $got      = join ", ", sort @got_variables;
    return if $expected eq $got;

    return "  expected (" . $expected . ") in msgid: $msgid\n" .
           "       got (" . $got      . ") in msgstr: $msgstr\n";
}
