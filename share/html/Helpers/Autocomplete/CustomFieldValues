%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2016 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
% $r->content_type('application/json; charset=utf-8');
<% JSON( \@suggestions ) |n %>
% $m->abort;
<%INIT>
# Only autocomplete the last value
my $term = (split /\n/, $ARGS{term} || '')[-1];

my $abort = sub {
    $r->content_type('application/json; charset=utf-8');
    $m->out(JSON( [] ));
    $m->abort;
};

unless ( exists $ARGS{ContextType} and exists $ARGS{ContextId} ) {
    RT->Logger->debug("No context provided");
    $abort->();
}

# Use _ParseObjectCustomFieldArgs to avoid duplicating the regex.
# See the docs for _ParseObjectCustomFieldArgs for details on the data
# structure returned. There will be only one CF, so drill down 2 layers
# to get the cf id, if one is there.

my %custom_fields = _ParseObjectCustomFieldArgs(\%ARGS);
my $CustomField;
foreach my $class ( keys %custom_fields ){
    foreach my $id ( keys %{$custom_fields{$class}} ){
        ($CustomField) = keys %{$custom_fields{$class}{$id}};
    }
}

unless ( $CustomField ) {
    RT->Logger->debug("No CustomField provided");
    $abort->();
}

my $SystemCustomFieldObj = RT::CustomField->new( RT->SystemUser );
my ($id, $msg) = $SystemCustomFieldObj->LoadById( $CustomField ) ;
unless ( $id ) {
    RT->Logger->debug("Invalid CustomField provided: $msg");
    $abort->();
}

my $context_object = $SystemCustomFieldObj->LoadContextObject(
    $ARGS{ContextType}, $ARGS{ContextId} );
$abort->() unless $context_object;

my $CustomFieldObj = RT::CustomField->new( $session{'CurrentUser'} );
if ( $SystemCustomFieldObj->ValidateContextObject($context_object) ) {
    # drop our privileges that came from calling LoadContextObject as the System User
    $context_object->new($session{'CurrentUser'});
    $context_object->LoadById($ARGS{ContextId});
    $CustomFieldObj->SetContextObject( $context_object );
} else {
    RT->Logger->debug("Invalid Context Object ".$context_object->id." for Custom Field ".$SystemCustomFieldObj->id);
    $abort->();
}

($id, $msg) = $CustomFieldObj->LoadById( $CustomField );
unless ( $CustomFieldObj->Name ) {
    RT->Logger->debug("Current User cannot see this Custom Field, terminating");
    $abort->();
}

my $values = $CustomFieldObj->Values;
$values->Limit(
    FIELD           => 'Name',
    OPERATOR        => 'LIKE',
    VALUE           => $term,
    SUBCLAUSE       => 'autocomplete',
    CASESENSITIVE   => 0,
);
$values->Limit(
    ENTRYAGGREGATOR => 'OR',
    FIELD           => 'Description',
    OPERATOR        => 'LIKE',
    VALUE           => $term,
    SUBCLAUSE       => 'autocomplete',
    CASESENSITIVE   => 0,
);
$m->callback(
    CallbackName => 'ModifyMaxResults',
    max => \$ARGS{max},
    term => $term,
    CustomField => $CustomFieldObj,
);
$values->RowsPerPage( $ARGS{max} // 10 );

my @suggestions;

while( my $value = $values->Next ) {
    push @suggestions,
      {
        value => $value->Name,
        label => $value->Description
        ? $value->Name . ' (' . $value->Description . ')'
        : $value->Name,
      };
}
</%INIT>
