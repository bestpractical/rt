%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2023 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<%ARGS>
%queues => ()
%catalogs => ()
</%ARGS>
<%INIT>
RT->Deprecated( Message => '/Search/Elements/PickCustomRoles is obsolete', Remove => '5.2' );

my $CustomRoles = RT::CustomRoles->new( $session{'CurrentUser'});
if ( %queues ) {
    foreach my $id (keys %queues) {
        # Gotta load up the $queue object, since queues get stored by name now.
        my $queue = RT::Queue->new($session{'CurrentUser'});
        $queue->Load($id);
        next unless $queue->Id;
        $CustomRoles->LimitToObjectId($queue->Id);
    }
    # If there are no referenced queues, do not limit LookupType to return 0 custom roles.
    $CustomRoles->LimitToLookupType( RT::Ticket->CustomFieldLookupType ) if $CustomRoles->_isLimited;
}
elsif ( %catalogs ) {
    foreach my $id (keys %catalogs) {
        # Gotta load up the $catalog object, since catalogs get stored by name now.
        my $catalog = RT::Catalog->new($session{'CurrentUser'});
        $catalog->Load($id);
        next unless $catalog->Id;
        $CustomRoles->LimitToObjectId($catalog->Id);
    }
    # If there are no referenced catalogs, do not limit LookupType to return 0 custom roles.
    $CustomRoles->LimitToLookupType( RT::Asset->CustomFieldLookupType ) if $CustomRoles->_isLimited;
}

$m->callback(
    CallbackName => 'MassageCustomRoles',
    CustomRoles  => $CustomRoles,
);

my @lines;

if (my @roles = @{$CustomRoles->ItemsArrayRef}) {
    my $name = 'CustomRole';
    my %line = (
        Name  => $name,
        Field => {
            Type      => 'component',
            Path      => 'SelectPersonType',
            Arguments => { Roles => \@roles, Default => "CustomRole.{" . $roles[0]->Name . "}" },
        },
        Op => {
            Type      => 'component',
            Path      => '/Elements/SelectMatch',
            Arguments => { IncludeShallow => grep( { !$_->MaxValues } @roles ) ? 1 : 0 },
        },
        Value => { Type => 'text', Size => 20 },
    );

    push @lines, \%line;
}

$m->callback( Conditions => \@lines, Queues => \%queues );

</%INIT>
% foreach( @lines ) {
<& ConditionRow, Condition => $_ &>
% }
