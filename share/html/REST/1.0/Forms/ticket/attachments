%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2016 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
%# REST/1.0/Forms/ticket/attachments
%#
<%ARGS>
$id
$args => undef
</%ARGS>
<%INIT>
my @data;
my ($c, $o, $k, $e) = ("", [], {}, "");
my $ticket = RT::Ticket->new($session{CurrentUser});

$ticket->Load($id);
unless ($ticket->Id) {
    return [ "# Ticket $id does not exist.", [], {}, 1 ];
}

my @arglist = split('/', $args || '');
my ($aid, $content);

if ( defined $arglist[1] && $arglist[1] eq 'content') {
    $aid = $arglist[0];
    $content = 1;
} else {
    $aid = $args;
    $content = 0;
}

if ($aid) {
    unless ($aid =~ /^\d+$/) {
        return [ "# Invalid attachment id: $aid", [], {}, 1 ];
    }
    my $attachment = RT::Attachment->new($session{CurrentUser});
    $attachment->Load($aid);
    unless ($attachment->Id eq $aid) {
        return [ "# Invalid attachment id: $aid", [], {}, 1 ];
    }
    if ($content) {
        $c = $attachment->OriginalContent;
        # if we're sending a binary attachment (and only the attachment)
        # flag it so bin/rt knows to special case it
        if ($attachment->ContentType !~ /^text\//) {
            $r->content_type($attachment->ContentType);
        }
    } else {
        my @data;
        push @data, [ id    => $attachment->Id   ];
        push @data, [ Subject    => $attachment->Subject   ];
        push @data, [ Creator    => $attachment->Creator   ];
        push @data, [ Created    => $attachment->Created   ];
        push @data, [ Transaction    => $attachment->TransactionId   ];
        push @data, [ Parent    => $attachment->Parent   ];
        push @data, [ MessageId    => $attachment->MessageId   ];
        push @data, [ Filename    => $attachment->Filename   ];
        push @data, [ ContentType    => $attachment->ContentType   ];
        push @data, [ ContentEncoding    => $attachment->ContentEncoding   ];
        push @data, [ Headers    => $attachment->Headers   ];
        push @data, [ Content    => $attachment->Content   ];

        my %k = map {@$_} @data;
        $o = [ map {$_->[0]} @data ];
        $k = \%k;
    }

}
else {
    my @attachments;
    my $transactions = $ticket->Transactions;
    while (my $t = $transactions->Next) {
        my $attachments = $t->Attachments;
        while (my $a = $attachments->Next) {
            my $size = length($a->Content || '');
            if ($size > 1024) { $size  = int($size/102.4)/10 . "k" }
            else              { $size .= "b" }
            my $name = (defined $a->Filename and length $a->Filename) ? $a->Filename : "(Unnamed)";
            push @attachments, $a->Id.": $name (".$a->ContentType . " / $size)";
        }
    }

    if (@attachments) {
        $o = [ "id", "Attachments" ];
        $k = {
            id => "ticket/".$ticket->Id."/attachments",
            Attachments => \@attachments
        };
    }
}

return [ $c, $o, $k, $e ];
</%INIT>
