%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2016 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<& /Admin/Elements/Header, Title => $title  &>
<& /Elements/Tabs &>
<& /Elements/ListActions &>

<form method="post" action="">
<input type="hidden" id="<% $id %>" />

<h2><&|/l&>Groups the principal is member of (check box to delete)</&></h2>

<& /Elements/CollectionList,
    OrderBy => 'Name',
    Order   => 'ASC',
    %ARGS,
    Rows          => $Rows,
    DisplayFormat => "__CheckBox.{Delete}__,$Format",
    Format => $Format,
    Collection => $is_member,
    AllowSorting => 1,
    PassArguments => [qw(Format Rows Page Order OrderBy id)],
&>

<h2><&|/l&>Groups the principal is not member of (check box to add)</&></h2>

<& /Elements/CollectionList,
    OrderBy => 'Name',
    Order   => 'ASC',
    Rows    => $Rows,
    %ARGS,
    DisplayFormat => "__CheckBox.{Add}__,'__HasMemberRecursively.{$id}__/TITLE:Recursive member',$Format",
    Format => $Format,
    Collection => $is_not_member,
    AllowSorting => 1,
    PassArguments => [qw(Format Rows Page Order OrderBy id)],
&>

<& /Elements/Submit, Label => loc('Update'), Name => 'Update' &>

</form>

<%INIT>
my $principal = RT::Principal->new( $session{'CurrentUser'} );
$principal->Load( $id ) || Abort(loc("Couldn't load principal #[_1]", $id));

my $object = $principal->Object;
$id = $object->id;

if ( $Update ) {
    my @results;
    foreach my $gid( @Add ) {
        my $group = RT::Group->new( $session{'CurrentUser'} );
        $group->LoadUserDefinedGroup( $gid );
        unless ( $group->id ) {
            push @results, loc( "Couldn't load group #[_1]", $gid );
            next;
        }
        my ($status, $msg) = $group->AddMember( $id );
        push @results, $msg;
    }
    foreach my $gid( @Delete ) {
        my $group = RT::Group->new( $session{'CurrentUser'} );
        $group->LoadUserDefinedGroup( $gid );
        unless ( $group->id ) {
            push @results, loc( "Couldn't load group #[_1]", $gid );
            next;
        }
        my ($status, $msg) = $group->DeleteMember( $id );
        push @results, $msg;
    }
    MaybeRedirectForResults(
        Arguments => { id => $id },
        Actions   => \@results,
    );
}

my $is_member = RT::Groups->new( $session{'CurrentUser'} );
$is_member->LimitToUserDefinedGroups;
$is_member->WithMember( PrincipalId => $id );

my $is_not_member = RT::Groups->new( $session{'CurrentUser'} );
$is_not_member->LimitToUserDefinedGroups;
$is_not_member->WithoutMember( PrincipalId => $id );
$is_not_member->Limit( FIELD => 'id', OPERATOR => '!=', VALUE => $id );

$Format ||= RT->Config->Get('AdminSearchResultFormat')->{'Groups'};
my $Rows = RT->Config->Get('AdminSearchResultRows')->{'Groups'} || 50;

my $title;
if ( $principal->IsUser ) {
    $title = loc("Memberships of the user [_1]", $object->Name);
} elsif ( $principal->IsGroup ) {
    $title = loc("Memberships of the group [_1]", $object->Name);
} else {
    $title = loc("Memberships of the principal #[_1]", $id);
}

</%INIT>
<%ARGS>
$id     => undef

$Update => 0,
@Add    => (),
@Delete => (),

$Format => undef
</%ARGS>
