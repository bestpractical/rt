%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2025 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<%method new>
<%init>
return \%ARGS;
</%init>
</%method>

<%method process>

<%init>
my @actions;
$self->{SearchId} ||= $args->{'SavedChartSearchId'} || 'new';

my $SearchParams = { map { $_ => $args->{$_} } @{$self->{SearchFields}} };

if ( my ( $container_object, $search_id ) = _parse_saved_search(
            $args->{'SavedSearchLoad'} || $args->{'SavedChartSearchId'} ) ) {
    my $search = RT::Attribute->new( $session{'CurrentUser'} );
    $search->Load($search_id);
    # We have a $search and now; import the others
    $self->{SearchId} = $args->{'SavedSearchLoad'} ||
        $args->{'SavedChartSearchId'};
    $self->{CurrentSearch}{Object} = $search;
    if ( $args->{'SavedSearchLoad'} ) {
        for ( @{ $self->{SearchFields} } ) {
            $args->{$_} = $search->SubValue($_) 
        }
    }

    $args->{SavedChartSearchId} = $args->{'SavedSearchLoad'}
        if $args->{'SavedSearchLoad'};
# saved search in /Search/Chart.html is different from /Search/Build.html
# the former is of type 'Chart', while the latter is of type 'Ticket'.
# After loading a saved search from the former after loading one from the
# latter, accessing /Search/Build.html will still show the old one, so we
# need to delete $session{CurrentSearchHash} to let it not show the old one.
# of course, the new one should not be shown there either because it's of
# different type
    delete $session{'CurrentSearchHash'};
}

# look for the current one in the available saved searches
if ($self->{SearchId} eq 'new') {
    my @Objects = RT::SavedSearch->new( $session{CurrentUser} )->ObjectsForLoading;
    push @Objects, RT::System->new($session{'CurrentUser'})
        if $session{'CurrentUser'}->HasRight( Object=> $RT::System,
                                              Right => 'SuperUser' );
    for my $obj (@Objects) {
        for ( $m->comp( "/Search/Elements/SearchesForObject", Object => $obj ) ) {
            my ( $desc, $loc_desc, $search ) = @$_;
            use Data::Dumper;
            # FFS
            local $Data::Dumper::Sortkeys = 1;
            if ( Dumper( $search->Content ) eq
                 Dumper( { %$SearchParams, SearchType => $self->{SearchType} } ) ) {
                $self->{CurrentSearch}{Object}      = $search;
                $self->{SearchId}                   = $search->Id;
            }
        }
    }
}

if ( $args->{SavedSearchSave} || $args->{SavedSearchCopy} ) {
    if ( ( my $search = $self->{CurrentSearch}{Object} ) && !$args->{SavedSearchCopy} ) {
        # permission check
        if ($search->Object->isa('RT::System')) {
            unless ($session{'CurrentUser'}->HasRight( Object=> $RT::System, Right => 'SuperUser')) {
                push @actions, loc("No permission to save system-wide searches");
                return @actions;
            }
        }

        # rename
        $search->SetDescription( $args->{SavedSearchDescription} );
        $search->SetSubValues(%$SearchParams);

        my ($new_search_type, $new_search_id) = split(/\-/, ($args->{'SavedSearchOwner'} || ''));
        my $search_type = ref($search->Object);
        # We need to get current obj_id now, because when we change obj_type to
        # RT::System, $search->Object->Id returns 1, not the old one :(
        my $search_id = $search->Object->Id;

        if ( $new_search_type && $new_search_id ) {
            my ($val, $msg);

            # we need to check right before we change any of ObjectType and ObjectId, 
            # or it will fail the 2nd change if we use SetObjectType and
            # SetObjectId sequentially

            if ( $search->CurrentUserHasRight('update') ) {
                if ( $new_search_type ne $search_type ) {
                    ( $val, $msg ) = $search->__Set(
                        Field => 'ObjectType',
                        Value => $new_search_type,
                    );
                    push @actions, loc( 'Unable to set privacy object: [_1]', $msg )
                      unless ($val);
                }
                if ( $new_search_id != $search_id ) {
                    ( $val, $msg ) = $search->__Set(
                        Field => 'ObjectId',
                        Value => $new_search_id,
                    );
                    push @actions, loc( 'Unable to set privacy id: [_1]', $msg )
                      unless ($val);
                }
            }
            else {
                # two loc are just for convenience so we don't need to
                # write an extra i18n translation item
                push @actions,
                  loc( 'Unable to set privacy object or id: [_1]',
                    loc('Permission Denied') )
            }
        } else {
            push @actions, loc('Unable to determine object type or id');
        }
        push @actions, loc( '[_1] [_2] updated.', loc($self->{SearchType}), $args->{SavedSearchDescription} );
    }
    else {
        # new saved search
        if (   $args->{SavedSearchCopy}
            && $self->{CurrentSearch}{Object}
            && (  !$args->{SavedSearchDescription}
                || $args->{SavedSearchDescription} eq $self->{CurrentSearch}{Object}->Description )
           )
        {
            $args->{SavedSearchDescription} = loc( "[_1] copy", $self->{CurrentSearch}{Object}->Description );
        }

        $SearchParams->{$_} //= $defaults->{$_} for @{$self->{SearchFields}};

        my $saved_search = RT::SavedSearch->new( $session{'CurrentUser'} );
        my ( $ok, $search_msg ) = $saved_search->Save(
            Privacy      => $args->{'SavedSearchOwner'},
            Name         => $args->{'SavedSearchDescription'},
            Type         => $self->{'SearchType'},
            SearchParams => $SearchParams
        );
        if ($ok) {
            $self->{CurrentSearch}{Object} = $saved_search->{Attribute};
            $self->{SearchId} = $args->{SavedChartSearchId} = 'RT::User-' .
                $session{CurrentUser}->id . '-SavedSearch-' .
                $saved_search->Id;
            push @actions, loc( '[_1] [_2] saved.', loc($self->{SearchType}), $args->{SavedSearchDescription} );
        } else {
            push @actions,
                [ loc("Can't save [_1]", loc($self->{SearchType})) . ': ' . loc($search_msg), 0 ];
        }
    }
}

if ( $args->{SavedSearchDelete} && $self->{CurrentSearch}{Object} ) {
    my ($ok, $msg) = $self->{CurrentSearch}{Object}->Delete;
    push @actions, $ok ? loc( '[_1] [_2] deleted.', loc($self->{SearchType}), $self->{CurrentSearch}{Object}->Description ) : $msg;
    delete $self->{CurrentSearch}{Object};
    delete $self->{SearchId};
    delete $args->{SavedChartSearchId};
}

$self->{CurrentSearch}{Description} = $self->{CurrentSearch}{Object}->Description
    if $self->{CurrentSearch}{Object};

return @actions;
</%init>
<%ARGS>
$self
$args
$defaults => {}
</%ARGS>

</%method>

<%method show>
<form method="post" action="<% $Action %>" name="SaveSearch">
<& /Search/Elements/EditSearches,
    Id            => $self->{SearchId} || 'new',
    Type          => $self->{SearchType},
    CurrentSearch => $self->{CurrentSearch},
    Title         => $Title,
    AllowCopy     => $AllowCopy,
    $self->{CurrentSearch}{Object} ? 
    ( Object        => $self->{CurrentSearch}{Object},
    Description   => $self->{CurrentSearch}{Object}->Description, ) : (),
    Class         => $Class,
&><br />
<%PERL>
foreach my $field ( @{$self->{SearchFields}} ) {
    if ( ref($ARGS{$field}) && ref($ARGS{$field}) ne 'ARRAY' ) {
        $RT::Logger->error("Couldn't store '$field'. it's reference to ". ref($ARGS{$field}) );
        next;
    }
    foreach my $value ( grep defined, ref($ARGS{$field})? @{ $ARGS{$field} } : $ARGS{$field} ) {
</%PERL>
<input type="hidden" class="hidden" name="<% $field %>" value="<% $value %>" />
%   }
% }
<input type="hidden" class="hidden" name="SavedChartSearchId" value="<% $self->{SearchId} || 'new'  %>" />
</form>
<%ARGS>
$self   => undef
$Action => ''
$Title  => loc('Saved searches')
$AllowCopy => 0
$Class => 'RT::Tickets'
</%ARGS>
<%init>
</%init>
</%method>
