%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2019 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<%ARGS>
$QuoteTransaction => undef
$CloneTicket => undef
</%ARGS>
<%init>
$m->callback( CallbackName => "Init", ARGSRef => \%ARGS );
my $Queue = $ARGS{Queue};

my $escape = sub { $m->interp->apply_escapes(shift, 'h') };

my $showrows = sub {
    my @pairs = @_;

    while (@pairs) {
        my $key = shift @pairs;
        my $val = shift @pairs;

        $m->out("<div class=\"entry\"><span class=\"label\">$key</span><div class=\"value\">$val</div></div>");

    }

};


my $CloneTicketObj;
if ($CloneTicket) {
    $CloneTicketObj = RT::Ticket->new( $session{CurrentUser} );
    $CloneTicketObj->Load($CloneTicket)
        or Abort( loc("Ticket could not be loaded") );

    my $clone = {
        Requestors => join( ',', $CloneTicketObj->RequestorAddresses ),
        Cc         => join( ',', $CloneTicketObj->CcAddresses ),
        AdminCc    => join( ',', $CloneTicketObj->AdminCcAddresses ),
        InitialPriority => $CloneTicketObj->Priority,
    };

    $clone->{$_} = $CloneTicketObj->$_()
        for qw/Owner Subject FinalPriority TimeEstimated TimeWorked
        Status TimeLeft/;

    $clone->{$_} = $CloneTicketObj->$_->AsString
        for grep { $CloneTicketObj->$_->IsSet }
        map      { $_ . "Obj" } qw/Starts Started Due Resolved/;

    my $get_link_value = sub {
        my ($link, $type) = @_;
        my $uri_method = $type . 'URI';
        my $local_method = 'Local' . $type;
        my $uri = $link->$uri_method;
        return if $uri->IsLocal and
                $uri->Object and
                $uri->Object->isa('RT::Ticket') and
                $uri->Object->__Value('Type') eq 'reminder';

        return $link->$local_method || $uri->URI;
    };
    my (@refers, @refers_by);
    my $refers = $CloneTicketObj->RefersTo;
    while ( my $refer = $refers->Next ) {
        my $refer_value = $get_link_value->($refer, 'Target');
        push @refers, $refer_value if defined $refer_value;
    }
    $clone->{'new-RefersTo'} = join ' ', @refers;

    my $refers_by = $CloneTicketObj->ReferredToBy;
    while ( my $refer_by = $refers_by->Next ) {
        my $refer_by_value = $get_link_value->($refer_by, 'Base');
        push @refers_by, $refer_by_value if defined $refer_by_value;
    }
    $clone->{'RefersTo-new'} = join ' ', @refers_by;

    my $cfs = $CloneTicketObj->QueueObj->TicketCustomFields();
    while ( my $cf = $cfs->Next ) {
        my $cf_id     = $cf->id;
        my $cf_values = $CloneTicketObj->CustomFieldValues( $cf->id );
        my @cf_values;
        while ( my $cf_value = $cf_values->Next ) {
            push @cf_values, $cf_value->Content;
        }
        $clone->{GetCustomFieldInputName( CustomField => $cf )} = join "\n",
            @cf_values;
    }

    for ( keys %$clone ) {
        $ARGS{$_} = $clone->{$_} if not defined $ARGS{$_};
    }

}

my @results;

my $title = loc("Create a ticket");

my $QueueObj = RT::Queue->new($session{'CurrentUser'});
$QueueObj->Load($Queue) || Abort(loc("Queue could not be loaded."));

$m->callback( QueueObj => $QueueObj, title => \$title, results => \@results, ARGSRef => \%ARGS );

$QueueObj->Disabled && Abort(loc("Cannot create tickets in a disabled queue."));

ProcessAttachments(ARGSRef => \%ARGS);

my $checks_failure = 0;

{
    my ($status, @msg) = $m->comp(
        '/Elements/ValidateCustomFields',
        CustomFields => $QueueObj->TicketCustomFields,
        ARGSRef      => \%ARGS
    );
    unless ( $status ) {
        $checks_failure = 1;
        push @results, @msg;
    }
}

my $gnupg_widget = $m->comp('/Elements/Crypt/SignEncryptWidget:new', Arguments => \%ARGS );
$m->comp( '/Elements/Crypt/SignEncryptWidget:Process',
    self      => $gnupg_widget,
    QueueObj  => $QueueObj,
);


if ( !exists $ARGS{'AddMoreAttach'} && ($ARGS{'id'}||'') eq 'new' ) {
    my $status = $m->comp('/Elements/Crypt/SignEncryptWidget:Check',
        self      => $gnupg_widget,
        Operation => 'Create',
        QueueObj  => $QueueObj,
    );
    $checks_failure = 1 unless $status;
}

# check email addresses for RT's
{
    foreach my $field ( qw(Requestors Cc AdminCc) ) {
        my $value = $ARGS{ $field };
        next unless defined $value && length $value;

        my @emails = Email::Address->parse( $value );
        foreach my $email ( grep RT::EmailParser->IsRTAddress($_->address), @emails ) {
            push @results, loc("[_1] is an address RT receives mail at. Adding it as a '[_2]' would create a mail loop", $email->format, loc($field =~ /^(.*?)s?$/) );
            $checks_failure = 1;
            $email = undef;
        }
        $ARGS{ $field } = join ', ', map $_->format, grep defined, @emails;
    }
}

my $skip_create = 0;
$m->callback( CallbackName => 'BeforeCreate', ARGSRef => \%ARGS, skip_create => \$skip_create, 
              checks_failure => $checks_failure, results => \@results );

if ((!exists $ARGS{'AddMoreAttach'}) and (defined($ARGS{'id'}) and $ARGS{'id'} eq 'new')) { # new ticket?
    if ( !$checks_failure && !$skip_create ) {
        $m->comp('show', %ARGS);
        $RT::Logger->crit("After display call; error is $@");
        $m->abort();
    }
}




</%init>
<&| /m/_elements/wrapper, title => $title &>
<& /Elements/ListActions, actions => \@results  &>
<form action="<% RT->Config->Get('WebPath') %>/m/ticket/create" method="post" enctype="multipart/form-data" name="TicketCreate" id="ticket-create">
<input type="hidden" class="hidden" name="id" value="new" />
<input type="hidden" class="hidden" name="Token" value="<% $ARGS{'Token'} %>" />
% $m->callback( CallbackName => 'FormStart', QueueObj => $QueueObj, ARGSRef => \%ARGS );
% if ($gnupg_widget) {
<& /Elements/Crypt/SignEncryptWidget:ShowIssues, self => $gnupg_widget, Queue => $QueueObj &>
% }


<div id="ticket-create-simple">
<&| /Widgets/TitleBox, title => $QueueObj->Name &>

<%perl>
$showrows->(
    loc("Subject") => '<input type="text" name="Subject" size="30" maxsize="200" value="'.$escape->($ARGS{Subject} || '').'" />');
</%perl>
    <span class="content-label label"><%loc("Describe the issue below")%></span>
        <& /Elements/MessageBox, exists $ARGS{Content}  ? (Default => $ARGS{Content}, IncludeSignature => 0 ) : ( QuoteTransaction => $QuoteTransaction ), Height => 5, SuppressAttachmentWarning => 1  &>


<&/Elements/Submit, Label => loc("Create") &>


</&>
</div>

<div id="ticket-create-basics">
<&| /Widgets/TitleBox &>
   <input type="hidden" class="hidden" name="Queue" value="<%$QueueObj->id %>" />
<%perl>

$showrows->(

   # loc('Queue') => $m->scomp( '/Ticket/Elements/ShowQueue', QueueObj => $QueueObj ) ,

    loc('Status') =>

        $m->scomp(
        "/Ticket/Elements/SelectStatus",
        Name         => "Status",
        QueueObj     => $QueueObj,
        ),

    loc("Owner") =>

        $m->scomp(
        "/Elements/SelectOwner",
        Name         => "Owner",
        QueueObj     => $QueueObj,
        Default      => $ARGS{Owner} || RT->Nobody->Id,
        DefaultValue => 0
        ),

    loc("Requestors") => $m->scomp(
        "/Elements/EmailInput",
        Name    => 'Requestors',
        Size    => '40',
        Default => $ARGS{Requestors} // $session{CurrentUser}->EmailAddress
    ),

    loc("Cc") =>

        $m->scomp( "/Elements/EmailInput", Name => 'Cc', Size => '40', Default => $ARGS{Cc} )
        . '<span class="comment"><i><font size="-2">'
        . loc(
        "(Sends a carbon-copy of this update to a comma-delimited list of email addresses. These people <strong>will</strong> receive future updates.)"
        )
        . '</font></i></span>',

    loc("Admin Cc") =>

        $m->scomp( "/Elements/EmailInput", Name => 'AdminCc', Size => '40', Default => $ARGS{AdminCc} )
        . '<span class="comment"><i><font size="-2">'
        . loc(
        "(Sends a carbon-copy of this update to a comma-delimited list of administrative email addresses. These people <strong>will</strong> receive future updates.)"
        )
        . '</font></i></span>',


);

</%perl>

<& /Elements/EditCustomFields,
    %ARGS,
    Object          => RT::Ticket->new($session{CurrentUser}),
    CustomFields    => $QueueObj->TicketCustomFields,
    AsTable         => 0,
    &>
<& /Ticket/Elements/EditTransactionCustomFields, %ARGS, QueueObj => $QueueObj &>

% if ( my $attachments = $session{'Attachments'}{ $ARGS{'Token'} }) {

<%loc("Attached file") %>

<%loc("Check box to delete")%><br />
% foreach my $attach_name ( keys %$attachments ) {
<input type="checkbox" class="checkbox" name="DeleteAttach" value="<% $attach_name %>" id="DeleteAttach-<% $attach_name %>" />
<label for="DeleteAttach-<% $attach_name %>"><% $attach_name %></label><br />
% } # end of foreach


% } # end of if

<%perl>
$showrows->(
    loc("Attach file") =>

        '<input type="file" name="Attach" />
<input type="submit" class="button" name="AddMoreAttach" value="' . loc("Add More Files") . '" />
<input type="hidden" class="hidden" name="UpdateAttach" value="1" />
'
);
</%perl>


% if ( $gnupg_widget ) {
<& /Elements/Crypt/SignEncryptWidget, self => $gnupg_widget, QueueObj => $QueueObj &>
% }


    <div class="ticket-info-basics">
          <&| /Widgets/TitleBox, title => loc('The Basics'), 
                title_class=> 'inverse',  
                color => "#993333" &>
<%perl>
$showrows->(
    loc("Priority") => $m->scomp(
        "/Elements/SelectPriority",
        Name    => "InitialPriority",
        Default => $ARGS{InitialPriority} ? $ARGS{InitialPriority} : $QueueObj->DefaultValue('InitialPriority'),
    ),
    loc("Final Priority") => $m->scomp(
        "/Elements/SelectPriority",
        Name    => "FinalPriority",
        Default => $ARGS{FinalPriority} ? $ARGS{FinalPriority} : $QueueObj->DefaultValue('FinalPriority'),
    ),

    loc("Time Estimated") => '<span class="timefield">'.$m->scomp(
        "/Elements/EditTimeValue",
        Name    => 'TimeEstimated',
        Default => $ARGS{TimeEstimated} || '',
        ).'</span>',

    loc("Time Worked") => '<span class="timefield">'.$m->scomp(
        "/Elements/EditTimeValue",
        Name    => 'TimeWorked',
        Default => $ARGS{TimeWorked} || '',
    ). '</span>',

    loc("Time Left") => '<span class="timefield">'.$m->scomp(
        "/Elements/EditTimeValue",
        Name    => 'TimeLeft',
        Default => $ARGS{TimeLeft} || '',
    ).'</span>',
);

</%perl>
</&>
<&|/Widgets/TitleBox, title => loc("Dates"),
    title_class=> 'inverse',  
    color => "#663366"  &>

<%perl>
$showrows->(
    loc("Starts") => $m->scomp( "/Elements/SelectDate", Name => "Starts", Default => ( $ARGS{Starts} || $QueueObj->DefaultValue('Starts') || '' )),
    loc("Due")    => $m->scomp( "/Elements/SelectDate", Name => "Due",    Default => ($ARGS{Due} || $QueueObj->DefaultValue('Due') || '' ))
);

</%perl>
</&>

<&|/Widgets/TitleBox, title => loc('Links'), title_class=> 'inverse' &>

<em><%loc("(Enter ticket ids or URLs, separated with spaces)")%></em>

<%perl>
$showrows->(
    loc("Depends on")     => '<input type="text" size="10" name="new-DependsOn" value="' . $escape->($ARGS{'new-DependsOn'} || '' ). '" />',
    loc("Depended on by") => '<input type="text" size="10" name="DependsOn-new" value="' . $escape->($ARGS{'DependsOn-new'} || '' ) . '" />',
    loc("Parents")        => '<input type="text" size="10" name="new-MemberOf" value="' . $escape->($ARGS{'new-MemberOf'} || '') . '" />',
    loc("Children")       => '<input type="text" size="10" name="MemberOf-new" value="' . $escape->($ARGS{'MemberOf-new'} || '') . '" />',
    loc("Refers to")      => '<input type="text" size="10" name="new-RefersTo" value="' . $escape->($ARGS{'new-RefersTo'} || '') . '" />',
    loc("Referred to by") => '<input type="text" size="10" name="RefersTo-new" value="' . $escape->($ARGS{'RefersTo-new'} || ''). '" />'
);
</%perl>

</&>


<& /Elements/Submit, Label => loc("Create") &>
</form>
</&>
</&>
