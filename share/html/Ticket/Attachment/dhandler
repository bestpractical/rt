%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2017 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<%perl>
my ( $ticket, $trans, $attach, $filename );
my $arg = $m->dhandler_arg;    # get rest of path
if ( $arg =~ m{^(\d+)/(\d+)} ) {
    $trans  = $1;
    $attach = $2;
}
else {
    Abort("Corrupted attachment URL.", Code => HTTP::Status::HTTP_BAD_REQUEST);
}
my $AttachmentObj = RT::Attachment->new( $session{'CurrentUser'} );
$AttachmentObj->Load($attach) || Abort("Attachment '$attach' could not be loaded", Code => HTTP::Status::HTTP_NOT_FOUND);

unless ( $AttachmentObj->id ) {
    Abort("Bad attachment id. Couldn't find attachment '$attach'\n", Code => HTTP::Status::HTTP_NOT_FOUND);
}
unless ( $AttachmentObj->TransactionId() == $trans ) {
    Abort("Bad transaction number for attachment. $trans should be". $AttachmentObj->TransactionId() . "\n", Code => HTTP::Status::HTTP_NOT_FOUND);
}

my $content = $AttachmentObj->OriginalContent;
my $content_type = $AttachmentObj->ContentType || 'text/plain';

my $attachment_regex = qr{^(image/svg\+xml|application/pdf)}i;
if ( RT->Config->Get('AlwaysDownloadAttachments') || ($content_type =~ $attachment_regex) ) {
    $r->headers_out->{'Content-Disposition'} = "attachment";
}
elsif ( !RT->Config->Get('TrustHTMLAttachments') ) {
    my $text_plain_regex = qr{^(text/html|application/xhtml\+xml|text/xml|application/xml)}i;
    $content_type = 'text/plain' if ( $content_type =~ $text_plain_regex );
}
elsif (lc $content_type eq 'text/html') {
    # If we're trusting and serving HTML for display not download, try to do
    # inline <img> rewriting to be extra helpful.
    my $count = RT::Interface::Web::RewriteInlineImages(
        Content     => \$content,
        Attachment  => $AttachmentObj,
    );
    RT->Logger->debug("Rewrote $count CID images when displaying original HTML attachment #$attach");
}

my $enc  = $AttachmentObj->OriginalEncoding || 'utf-8';
my $iana = Encode::find_encoding($enc);
   $iana = $iana ? $iana->mime_name : $enc;

require MIME::Types;
my $mimetype = MIME::Types->new->type($content_type);
unless ( $mimetype && $mimetype->isBinary ) {
    $content_type .= ";charset=$iana";
}

$r->content_type($content_type);
$m->clear_buffer();
$m->out($content);
$m->abort;
</%perl>
<%attr>
AutoFlush => 0
</%attr>
