%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2016 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
% $m->callback( CallbackName => 'BeforeCustomFields', Object => $Object,
%               Grouping => $Grouping, ARGSRef => \%ARGS, CustomFields => $CustomFields, Table => $Table );
% if ($Table) {
<table>
% }
% while ( my $CustomField = $CustomFields->Next ) {
% my $Values = $Object->CustomFieldValues( $CustomField->Id );
% my $count = $Values->Count;
% next if $HideEmpty and not $count;
  <tr id="CF-<%$CustomField->id%>-ShowRow">
    <td class="label"><% $CustomField->Name %>:</td>
    <td class="value">
% unless ( $count ) {
<i><&|/l&>(no value)</&></i>
% } elsif ( $count == 1 ) {
%   $print_value->( $CustomField, $Values->First );
% } else {
<ul>
% while ( my $Value = $Values->Next ) {
<li>
% $print_value->( $CustomField, $Value );
</li>
% }
</ul>
% }
    </td>
% $m->callback( CallbackName => 'AfterCustomFieldValue', CustomField => $CustomField,
%               Object => $Object, Grouping => $Grouping, Table => $Table );
  </tr>
% }
% if ($Table) {
</table>
% }
% $m->callback( CallbackName => 'AfterCustomFields', Object => $Object,
%               Grouping => $Grouping, ARGSRef => \%ARGS, Table => $Table );
<%INIT>
$m->callback(
    %ARGS,
    CallbackName => 'MassageCustomFields',
    Object       => $Object,
    CustomFields => $CustomFields,
    Table        => $Table,
);

$CustomFields->LimitToGrouping( $Object => $Grouping ) if defined $Grouping;

# don't print anything if there is no custom fields
return unless $CustomFields->First;
$CustomFields->GotoFirstItem;

my $print_value = sub {
    my ($cf, $value) = @_;
    my $linked = $value->LinkValueTo;
    if ( defined $linked && length $linked ) {
        my $linked = $m->interp->apply_escapes( $linked, 'h' );
        $m->out('<a href="'. $linked .'" target="_blank">');
    }
    my $comp = "ShowCustomField". $cf->Type;
    $m->callback(
        CallbackName => 'ShowComponentName',
        Name         => \$comp,
        CustomField  => $cf,
        Object       => $Object,
        Table        => $Table,
    );
    if ( $m->comp_exists( $comp ) ) {
        $m->comp( $comp, Object => $value );
    } else {
        $m->out( $m->interp->apply_escapes( $value->Content, 'h' ) );
    }
    $m->out('</a>') if defined $linked && length $linked;

    # This section automatically populates a div with the "IncludeContentForValue" for this custom
    # field if it's been defined
    if ( $cf->IncludeContentForValue ) {
       my $vid = $value->id;
       $m->out(   '<div class="object_cf_value_include" id="object_cf_value_'. $vid .'">' );
       $m->out( loc("See also:") );
       $m->out(   '<a href="'. $m->interp->apply_escapes($value->IncludeContentForValue, 'h') .'">' );
       $m->out( $m->interp->apply_escapes($value->IncludeContentForValue, 'h') );
       $m->out(   qq{</a></div>\n} );
       $m->out(   qq{<script><!--\njQuery('#object_cf_value_$vid').load(} );
       $m->out(   $m->interp->apply_escapes($value->IncludeContentForValue, 'j') );
       $m->out(   qq{);\n--></script>\n} );
    }
};

</%INIT>
<%ARGS>
$Object => undef
$CustomFields => $Object->CustomFields
$Grouping => undef
$Table => 1
$HideEmpty => 0
</%ARGS>
