%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2022 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
% $m->callback( ARGSRef => \%ARGS, CallbackName => 'BeforeTable' );
<div class="myrt row">

<div class="<% 'boxcontainer col-md-' . ( $sidebar ? '8' : '12' ) %>">
% $show_cb->($_) foreach @$body;
</div>

% if ( $sidebar ) {
<div class="boxcontainer col-md-4">
% $show_cb->($_) foreach @$sidebar;
</div>
% }

</div>
% $m->callback( ARGSRef => \%ARGS, CallbackName => 'AfterTable' );
<%INIT>

my %allowed_components = map {$_ => 1} @{RT->Config->Get('HomepageComponents')};

my $user = $session{'CurrentUser'}->UserObj;
unless ( $Portlets ) {
    my ($system_default) = RT::System->new($session{'CurrentUser'})->Attributes->Named('DefaultDashboard');
    my $system_default_id = $system_default ? $system_default->Content : 0;
    my $dashboard_id = $user->Preferences( DefaultDashboard => $system_default_id ) or return;

    # Allow any user to read system default dashboard
    my $dashboard = RT::Dashboard->new($system_default_id == $dashboard_id ? RT->SystemUser : $session{'CurrentUser'});
    my ( $ok, $msg ) = $dashboard->LoadById( $dashboard_id );
    if ( !$ok ) {
        my $user_msg = loc('Unable to load selected dashboard, it may have been deleted');
        if ( $dashboard_id == $system_default_id ) {
            RT->Logger->warn("Unable to load dashboard: $msg");
            $m->out($m->scomp('/Elements/ListActions', actions => $user_msg));
            return;
        }
        else {
            my ( $ok, $sys_msg ) = $dashboard->LoadById( $system_default_id );
            if ( $ok ) {
                $m->out($m->scomp('/Elements/ListActions', actions => [$user_msg, loc('Setting homepage to system default homepage')]));
                my ( $ok, $msg ) = $user->DeletePreferences( 'DefaultDashboard' );
                RT->Logger->error( "Couldn't delete DefaultDashboard of user " . $user->Name . ": $msg" ) unless $ok;
            }
            else {
                RT->Logger->warn("Unable to load dashboard: $msg $sys_msg");
                $m->out($m->scomp('/Elements/ListActions', actions => $user_msg));
                return;
            }
        }
    }
    $Portlets = $dashboard->Panes;
}

$m->callback( CallbackName => 'MassagePortlets', Portlets => $Portlets );

my ($body, $sidebar) = @{$Portlets}{qw(body sidebar)};
unless( $body && @$body ) {
    $body = $sidebar || [];
    $sidebar = undef;
}
$sidebar = undef unless $sidebar && @$sidebar;

my $Rows = $user->Preferences( 'SummaryRows', ( RT->Config->Get('DefaultSummaryRows') || 10 ) );

my $show_cb;
$show_cb = sub {
    my $entry = shift;
    my $type;
    my $name;

    # Back compat for RTIR older than 5.0.2
    if ( defined $RT::IR::VERSION
         && RT::Handle::cmp_version($RT::IR::VERSION, '5.0.1') <= 0
         && $m->callers(1)->path eq '/RTIR/index.html' ) {

        $type  = $entry->{type};
        $name = $entry->{'name'};
        if ( $type eq 'component' ) {
            if (!$allowed_components{$name}) {
                $m->out( $m->interp->apply_escapes( loc("Invalid portlet [_1]", $name), "h" ) );
                RT->Logger->info("Invalid portlet $name found on user " . $user->Name . "'s homepage");
                if ($name eq 'QueueList' && $allowed_components{Quicksearch}) {
                    RT->Logger->warning("You may need to replace the component 'Quicksearch' in the HomepageComponents config with 'QueueList'. See the UPGRADING-4.4 document.");
                }
            }
            else {
                $m->comp( $name, %{ $entry->{arguments} || {} } );
            }
        } elsif ( $type eq 'system' ) {
            $m->comp( '/Elements/ShowSearch', Name => $name, Override => { Rows => $Rows } );
        } elsif ( $type eq 'saved' ) {
            $m->comp( '/Elements/ShowSearch', SavedSearch => $name, Override => { Rows => $Rows } );
        } else {
            $RT::Logger->error("unknown portlet type '$type'");
        }
    }
    else {
        # Normal handling for RT 5.0.2 and newer
        my $depth = shift || 0;
        Abort("Possible recursive dashboard detected.", SuppressHeader => 1) if $depth > 8;

        $type  = $entry->{portlet_type};
        $name = $entry->{component};
        if ( $type eq 'component' ) {
            if (!$allowed_components{$name}) {
                $m->out( $m->interp->apply_escapes( loc("Invalid portlet [_1]", $name), "h" ) );
                RT->Logger->info("Invalid portlet $name found on user " . $user->Name . "'s homepage");
                if ($name eq 'QueueList' && $allowed_components{Quicksearch}) {
                    RT->Logger->warning("You may need to replace the component 'Quicksearch' in the HomepageComponents config with 'QueueList'. See the UPGRADING-4.4 document.");
                }
            }
            else {
                $m->comp( $name, %{ $entry->{arguments} || {} } );
            }
        } elsif ( $type eq 'search' ) {
            $m->comp( '/Elements/ShowSearch', RT::Dashboard->ShowSearchName($entry), Override => { Rows => $Rows } );
        } elsif ( $type eq 'dashboard' ) {
            my $current_dashboard = RT::Dashboard->new($session{CurrentUser});
            my ($ok, $msg) = $current_dashboard->LoadById($entry->{id});
            if (!$ok) {
                $m->out($msg);
                return;
            }
            my @panes = @{ $current_dashboard->Panes->{$entry->{pane}} || [] };
            for my $portlet (@panes) {
                $show_cb->($portlet, $depth + 1);
            }
        } else {
            $RT::Logger->error("unknown portlet type '$type'");
        }
    }
};

</%INIT>
<%ARGS>
$Portlets => undef
</%ARGS>
