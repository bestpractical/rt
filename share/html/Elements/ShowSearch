%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2023 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
% my $alt = loc('Edit');

<&|/Widgets/TitleBox,
    title => loc(RT::SavedSearch->EscapeDescription($search->Description), $ProcessedSearchArg->{'Rows'}),
    title_raw => $title_raw,
    title_href => $query_link_url.$QueryString,
    titleright_raw => $customize ? qq[<span class="fas fa-cog icon-bordered fa-2x" alt="$alt" data-toggle="tooltip" data-placement="top" data-original-title="$alt"></span>] : '',
    titleright_href => $customize,
    hideable => $hideable,
    class => 'fullwidth' &>
<& $query_display_component, hideable => $hideable, %$ProcessedSearchArg, ShowNavigation => 0, Class => $class, HasResults => $HasResults, PreferOrderBy => 1 &>
</&>
<%init>
my $search;
my $user = $session{'CurrentUser'}->UserObj;
my $SearchArg;
my $customize;
my $query_display_component = '/Elements/CollectionList';
my $query_link_url = RT->Config->Get('WebPath').'/Search/Results.html';
my $class = 'RT::Tickets';

if ($SavedSearch) {
    my ( $container_object, $search_id ) = _parse_saved_search($SavedSearch);
    $search = RT::Attribute->new( $session{'CurrentUser'} );
    $search->Load($search_id) if $search_id;

    if ( $search->Id ) {

        # $container_object is undef if it's another user's personal saved
        # search. We need to explicitly exclude this case as
        # CurrentUserHasRight doesn't handle that.
        if ( $container_object && $search->CurrentUserHasRight('display') ) {
            $SearchArg = $search->Content;
        }
        else {
            RT->Logger->debug( "User "
                    . $session{CurrentUser}->Name
                    . " does not have rights to view saved search: "
                    . $search->__Value('Description')
                    . "($SavedSearch)" );
            return;
        }
    }
    else {
        $m->out(loc("Saved search [_1] not found", $m->interp->apply_escapes($SavedSearch, 'h'))) unless $IgnoreMissing;
        return;
    }

    if ( $search->Object->isa('RT::System') ) {
        $SearchArg = $user->Preferences( $search, $search->Content );
    }

    $SearchArg->{'SavedSearchId'} ||= $SavedSearch;
    $SearchArg->{'SearchType'} ||= 'Ticket';
    if ( $SearchArg->{SearchType} eq 'Transaction' ) {
        $class = $SearchArg->{Class} = 'RT::Transactions';
        $customize
            = RT->Config->Get('WebPath')
            . '/Search/Build.html?'
            . $m->comp( '/Elements/QueryString', SavedSearchLoad => $SavedSearch, Class => 'RT::Transactions' );
        $ShowCount = RT->Config->Get('TransactionShowSearchResultCount')->{'RT::Ticket'};
    }
    elsif ( $SearchArg->{SearchType} eq 'Asset' ) {
        $class = $SearchArg->{Class} = 'RT::Assets';
        $customize
            = RT->Config->Get('WebPath')
            . '/Search/Build.html?'
            . $m->comp( '/Elements/QueryString', SavedSearchLoad => $SavedSearch, Class => 'RT::Assets' );
        $ShowCount = RT->Config->Get('AssetShowSearchResultCount');
    }
    elsif ( $SearchArg->{SearchType} ne 'Ticket' ) {

        if ( $SearchArg->{'SearchType'} eq 'Chart' ) {
            $SearchArg->{'SavedChartSearchId'} ||= $SavedSearch;
            $class = $SearchArg->{Class} if $SearchArg->{Class};
        }

        # XXX: dispatch to different handler here
        $query_display_component
            = '/Search/Elements/' . $SearchArg->{SearchType};
        $query_link_url = RT->Config->Get('WebPath') . "/Search/$SearchArg->{SearchType}.html";
        $ShowCount = 0;
    } elsif ($ShowCustomize) {
        if ( $search->Object->isa('RT::System') ) {
            $customize = RT->Config->Get('WebPath') . '/Prefs/Search.html?'
                . $m->comp( '/Elements/QueryString',
                    name => ref($search) . '-' . $search->Id );
        }
        else {
            $customize = RT->Config->Get('WebPath') . '/Search/Build.html?'
                . $m->comp( '/Elements/QueryString',
                SavedSearchLoad => $SavedSearch );
        }
    }
} else {
    RT->Deprecated( Message => 'Passing bare $Name is deprecated', Instead => '$SavedSearch', Remove => '5.2' );
    ($search) = RT::System->new( $session{'CurrentUser'} ) ->Attributes->Named( 'Search - ' . $Name );
    unless ( $search && $search->Id ) {
        my (@custom_searches) = RT::System->new( $session{'CurrentUser'} )->Attributes->Named('SavedSearch');
        foreach my $custom (@custom_searches) {
            if ($custom->Description eq $Name) { $search = $custom; last }
        }
        unless ($search && $search->id) {
            $m->out(loc("Predefined search [_1] not found", $m->interp->apply_escapes($Name, 'h')));
            return;
        }
    }

    $SearchArg = $user->Preferences( $search, $search->Content );
    if ($ShowCustomize) {
        $customize = RT->Config->Get('WebPath') . '/Prefs/Search.html?'
            . $m->comp( '/Elements/QueryString',
                name => ref($search) . '-' . $search->Id );
    }
}

# ProcessedSearchArg is a search with overridings, but for link we use
# orginal search's poperties
my $ProcessedSearchArg = $SearchArg;
$ProcessedSearchArg = { %$SearchArg, %Override } if keys %Override;

$m->callback(
    %ARGS,
    CallbackName  => 'ModifySearch',
    OriginalSearch => $SearchArg,
    Search         => $ProcessedSearchArg,
);

foreach ( $SearchArg, $ProcessedSearchArg ) {
    $_->{'Format'} ||= '';
    $_->{'Query'} ||= '';

    # extract-message-catalog would "$1", so we avoid quotes for loc calls
    $_->{'Format'} =~ s/__loc\(["']?(\w+)["']?\)__/my $f = "$1"; loc($f)/ge;
}

my $QueryString = '?' . QueryString( ShortenSearchQuery(%$SearchArg) );

my $title_raw;
if ($ShowCount) {
    my $collection = $class->new( $session{'CurrentUser'} );
    my $query;
    if ( $class eq 'RT::Transactions' ) {
        $query = join ' AND ', "ObjectType = '$ProcessedSearchArg->{ObjectType}'",
            $ProcessedSearchArg->{Query} ? "($ProcessedSearchArg->{Query})" : ();
    }
    else {
        $query = $ProcessedSearchArg->{Query};
    }

    $collection->FromSQL($query);
    if ( $ProcessedSearchArg->{OrderBy} ) {
        my @order_by;
        my @order;
        if ( $ProcessedSearchArg->{OrderBy} =~ /\|/ ) {
            @order_by = split /\|/, $ProcessedSearchArg->{OrderBy};
            @order    = split /\|/, $ProcessedSearchArg->{Order};
        }
        else {
            @order_by = $ProcessedSearchArg->{OrderBy};
            @order    = $ProcessedSearchArg->{Order};
        }
        @order_by = grep length, @order_by;
        $collection->OrderByCols( map { { FIELD => $order_by[$_], ORDER => $order[$_] } } ( 0 .. $#order_by ) );
    }
    $collection->RowsPerPage( $ProcessedSearchArg->{Rows} ) if $ProcessedSearchArg->{Rows};
    $collection->CombineSearchAndCount(1);

    my $count = $collection->CountAll();

    my $title;
    if ( $class eq 'RT::Transactions' ) {
        $title = loc('(Found [quant,_1,transaction,transactions])', $count);
    }
    elsif ( $class eq 'RT::Assets' ) {
        $title = loc('(Found [quant,_1,asset,assets])', $count);
    }
    else {
        $title = loc('(Found [quant,_1,ticket,tickets])', $count);
    }
    $title_raw = '<span class="results-count">' . $title . '</span>';

    # don't repeat the search in CollectionList
    $ProcessedSearchArg->{Collection} = $collection;
    $ProcessedSearchArg->{TotalFound} = $count;
}
</%init>
<%ARGS>
$Name           => undef
$SavedSearch    => undef
%Override       => ()
$IgnoreMissing  => undef
$hideable       => 1
$ShowCustomize  => 1
$ShowCount      => RT->Config->Get('ShowSearchResultCount')
$HasResults     => undef
</%ARGS>
