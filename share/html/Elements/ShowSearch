%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2024 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}

<&|/Widgets/TitleBox,
    title => $title,
    title_raw => $title_raw,
    title_href => $query_link_url.$QueryString,
    icons_ref => \@icon_links,
    hideable => $hideable,
    class => 'fullwidth',
    htmx_get => RT->Config->Get('WebPath') . ( $session{CurrentUser}->Privileged ? '' : '/SelfService' ) . '/Views/Component/SavedSearch?SavedSearch=' . $SavedSearch . $htmx_query_args,
    htmx_load => $HTMXLoad &>
<& $query_display_component, hideable => $hideable, %$ProcessedSearchArg, ShowNavigation => 0, Class => $class, HasResults => $HasResults, PreferOrderBy => 1 &>
% if ( $refresh_seconds ) {
  <div class="refresh-text">
    <small class="text-body-secondary"><&|/l&>Last loaded</&> <% $loaded_date->AsString %>.</small>
    <small class="text-body-secondary"><&|/l, RT::Date->new($session{CurrentUser})->DurationAsString($refresh_seconds) &>Refreshing every [_1].</&></small>
  </div>
% }
</&>
<%init>
my $search;
my $user = $session{'CurrentUser'}->UserObj;
my $SearchArg;
my $customize;
my $query_display_component = '/Elements/CollectionList';
my $query_link_url = RT->Config->Get('WebPath').'/Search/Results.html';
my $class = 'RT::Tickets';
my $refresh_seconds;
my $loaded_date;
my %event;

if ($SavedSearch) {
    $search = RT::SavedSearch->new( $session{'CurrentUser'} );
    $search->Load($SavedSearch);

    if ( $search->Id ) {
        # $container_object is undef if it's another user's personal saved
        # search. We need to explicitly exclude this case as
        # CurrentUserHasRight doesn't handle that.
        if ( $search->CurrentUserCanSee ) {
            if ( $search->Disabled && !$IgnoreMissing ) {
                $m->out( loc( "Saved search [_1] is disabled", $m->interp->apply_escapes( $search->Name ) ) );
                return;
            }

            $SearchArg = $search->Content || {};
        }
        else {
            RT->Logger->debug( "User "
                    . $session{CurrentUser}->Name
                    . " does not have rights to view saved search: "
                    . $search->__Value('Name')
                    . "($SavedSearch)" );
            return;
        }
    }
    else {
        $m->out(loc("Saved search [_1] not found", $m->interp->apply_escapes($SavedSearch, 'h'))) unless $IgnoreMissing;
        return;
    }

    if ( $search->PrincipalId == RT->System->Id ) {
        $SearchArg = $user->Preferences( $search, $search->Content );
    }

    $SearchArg->{'SavedSearchId'} ||= $SavedSearch;
    $SearchArg->{'SearchType'} = $search->Type;
    if ( $SearchArg->{SearchType} eq 'TicketTransaction' ) {
        $class = $SearchArg->{Class} = 'RT::Transactions';
        $customize
            = RT->Config->Get('WebPath')
            . '/Search/Build.html?'
            . $m->comp( '/Elements/QueryString', SavedSearchLoad => $SavedSearch, Class => 'RT::Transactions' );
        $ShowCount = RT->Config->Get('TransactionShowSearchResultCount')->{'RT::Ticket'};
    }
    elsif ( $SearchArg->{SearchType} eq 'Asset' ) {
        $class = $SearchArg->{Class} = 'RT::Assets';
        $customize
            = RT->Config->Get('WebPath')
            . '/Search/Build.html?'
            . $m->comp( '/Elements/QueryString', SavedSearchLoad => $SavedSearch, Class => 'RT::Assets' );
        $ShowCount = RT->Config->Get('AssetShowSearchResultCount');
    }
    elsif ( $SearchArg->{SearchType} ne 'Ticket' ) {

        my $type = $SearchArg->{'SearchType'};
        if ( $type =~ /Chart/ ) {
            $SearchArg->{'SavedChartSearchId'} ||= $SavedSearch;
            $class = $SearchArg->{Class} if $SearchArg->{Class};
            $type = 'Chart';
        }


        # XXX: dispatch to different handler here
        $query_display_component
            = '/Search/Elements/' . $type;
        $query_link_url = RT->Config->Get('WebPath') . "/Search/$type.html";
        $ShowCount = 0;
    } elsif ($ShowCustomize) {
        if ( $search->PrincipalId == RT->System->Id ) {
            $customize = RT->Config->Get('WebPath') . '/Prefs/Search.html?'
                . $m->comp( '/Elements/QueryString', id => $SavedSearch );
        }
        else {
            $customize = RT->Config->Get('WebPath') . '/Search/Build.html?'
                . $m->comp( '/Elements/QueryString', SavedSearchLoad => $SavedSearch );
        }
    }

    if ( $SearchArg->{'SearchRefreshInterval'} ) {
        $refresh_seconds = $SearchArg->{'SearchRefreshInterval'};
        $loaded_date = RT::Date->new( $session{CurrentUser} );
        $loaded_date->Set( Format => 'Unix', Value => $m->{'rt_base_time'}->[0] );
    }

}

# ProcessedSearchArg is a search with overridings, but for link we use
# orginal search's poperties
my $ProcessedSearchArg = $SearchArg;
$ProcessedSearchArg = { %$SearchArg, %Override } if keys %Override;

$m->callback(
    %ARGS,
    CallbackName  => 'ModifySearch',
    OriginalSearch => $SearchArg,
    Search         => $ProcessedSearchArg,
);

foreach ( $SearchArg, $ProcessedSearchArg ) {
    $_->{'Format'} ||= '';
    $_->{'Query'} ||= '';

    # extract-message-catalog would "$1", so we avoid quotes for loc calls
    $_->{'Format'} =~ s/__loc\(["']?(\w+)["']?\)__/my $f = "$1"; loc($f)/ge;
}

my $QueryString = '?' . QueryString( ShortenSearchQuery(%$SearchArg) );

my $title_raw;

# Both not-lazy load and requests from /Views/ have $HTMXLoad set to false.
if ( $ShowCount && !$HTMXLoad ) {
    my $collection = $class->new( $session{'CurrentUser'} );
    my $query;
    if ( $class eq 'RT::Transactions' ) {
        $query = join ' AND ', "ObjectType = '$ProcessedSearchArg->{ObjectType}'",
            $ProcessedSearchArg->{Query} ? "($ProcessedSearchArg->{Query})" : ();
    }
    else {
        $query = $ProcessedSearchArg->{Query};
    }

    $collection->FromSQL($query);
    if ( $ProcessedSearchArg->{OrderBy} ) {
        my @order_by;
        my @order;
        if ( $ProcessedSearchArg->{OrderBy} =~ /\|/ ) {
            @order_by = split /\|/, $ProcessedSearchArg->{OrderBy};
            @order    = split /\|/, $ProcessedSearchArg->{Order};
        }
        else {
            @order_by = $ProcessedSearchArg->{OrderBy};
            @order    = $ProcessedSearchArg->{Order};
        }
        @order_by = grep length, @order_by;
        $collection->OrderByCols( map { { FIELD => $order_by[$_], ORDER => $order[$_] } } ( 0 .. $#order_by ) );
    }
    $collection->RowsPerPage( $ProcessedSearchArg->{Rows} ) if $ProcessedSearchArg->{Rows};
    $collection->CombineSearchAndCount(1);

    my $count = $collection->CountAll();

    my $title;
    if ( $class eq 'RT::Transactions' ) {
        $title = loc('(Found [quant,_1,transaction,transactions])', $count);
    }
    elsif ( $class eq 'RT::Assets' ) {
        $title = loc('(Found [quant,_1,asset,assets])', $count);
    }
    else {
        $title = loc('(Found [quant,_1,ticket,tickets])', $count);
    }
    $title_raw = '<span class="results-count">' . $title . '</span>';

    # don't repeat the search in CollectionList
    $ProcessedSearchArg->{Collection} = $collection;
    $ProcessedSearchArg->{TotalFound} = $count;
}

my $htmx_query_args = '';
if ( exists $Override{'Rows'} ) {
    $htmx_query_args = "&Rows=" . $Override{'Rows'};
}

my $title = loc(RT::SavedSearch->EscapeDescription($search->Description), $ProcessedSearchArg->{'Rows'});

if ( $m->request_path =~ m{^/Views/} ) {
    $event{triggerChanged} = 'every ' . $refresh_seconds . 's[checkRefreshState(this)]' if $refresh_seconds;
    $event{widgetTitleChanged}   = $title . ( $title_raw // '' );
    $r->headers_out->{'HX-Trigger'} = JSON( \%event, ascii => 1, );
}

my @icon_links;

if ( $customize ) {
    push @icon_links, {
        icon_name => 'gear',
        tooltip_text => loc('Edit'),
        icon_href => $customize
    };
}

</%init>
<%ARGS>
$Name           => undef
$SavedSearch    => undef
%Override       => ()
$IgnoreMissing  => undef
$hideable       => 1
$ShowCustomize  => 1
$ShowCount      => RT->Config->Get('ShowSearchResultCount')
$HasResults     => undef
$HTMXLoad       => undef # Pass 1 to render with htmx load enabled
</%ARGS>
