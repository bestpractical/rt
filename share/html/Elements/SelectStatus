%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2016 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<select name="<%$Name%>" <% $Multiple ? qq{multiple="multiple" size="$Size"} : '' |n %>>
% if ( $DefaultValue ) {
<option value=""<% !$Default && qq[ selected="selected"] |n %>><% $DefaultLabel %></option>
% }
% for my $lifecycle (sort keys %statuses_by_lifecycle) {
%     if ($group_by_lifecycle) {
<optgroup label="<% $lifecycle %>">
%     }
%     foreach my $status (@{$statuses_by_lifecycle{$lifecycle}}) {
%         next if ($SkipDeleted && lc $status eq 'deleted');
%         my $selected = defined $Default && $status eq $Default ? 'selected="selected"' : '';
<option value="<% $status %>" <% $selected |n %>><% loc($status) %></option>
%     }
%     if ($group_by_lifecycle) {
</optgroup>
%     }
% }
</select>
<%INIT>
### XXX: no cover for Tools/MyDay.html

my %statuses_by_lifecycle;
if ( @Statuses ) {
    $statuses_by_lifecycle{''} = \@Statuses;
} else {
    if ( $Object ) {
        my $lifecycle = $Object->LifecycleObj;
        if ($Object->_Accessible("Status", "read")) {
            my $current = $Object->Status;
            my @status;
            push @status, $current;

            my %has = ();
            foreach my $next ( $lifecycle->Transitions( $current ) ) {
                my $check = $lifecycle->CheckRight( $current => $next );
                $has{ $check } = $Object->CurrentUserHasRight( $check )
                    unless exists $has{ $check };
                push @status, $next if $has{ $check };
            }
            $statuses_by_lifecycle{$lifecycle->Name} = \@status;
        } else {
            $statuses_by_lifecycle{$lifecycle->Name} = [ $lifecycle->Transitions('') ];
        }
    }
    for my $lifecycle ( @Lifecycles ) {
        $statuses_by_lifecycle{$lifecycle->Name} ||= [ $lifecycle->Valid ];
    }

    if (not keys %statuses_by_lifecycle) {
        for my $lifecycle (map { RT::Lifecycle->Load($_) } RT::Lifecycle->List($Type)) {
            $statuses_by_lifecycle{$lifecycle->Name} = [ $lifecycle->Valid ];
        }
    }
}

if (keys %statuses_by_lifecycle) {
    my %simplified;
    my $key = sub {
        join "\0", sort @{$_[0]};
    };
    for my $name (sort keys %statuses_by_lifecycle) {
        my $matched;
        my $statuses = $statuses_by_lifecycle{$name};
        for my $simple (sort keys %simplified) {
            if ($key->($statuses) eq $key->($simplified{$simple})) {
                # Statuses are the same, join 'em!
                $simplified{"$simple, $name"} = delete $simplified{$simple};
                $matched++;
                last;
            }
        }
        unless ($matched) {
            $simplified{$name} = $statuses;
        }
    }
    %statuses_by_lifecycle = %simplified;
}

my $group_by_lifecycle = keys %statuses_by_lifecycle > 1;
</%INIT>
<%ARGS>
$Name => undef
$Type => undef,

@Statuses => ()
$Object => undef,
@Lifecycles => (),

$Default => ''
$SkipDeleted => 0
$DefaultValue => 1
$DefaultLabel => "-"

$Multiple => 0
$Size => 6
</%ARGS>
