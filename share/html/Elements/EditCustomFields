%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2022 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
% $m->callback( CallbackName => 'BeforeCustomFields', Object => $Object,
%               Grouping => $Grouping, ARGSRef => \%ARGS, CustomFields => $CustomFields);
% if (@CustomFields) {
% if ( !$InTable ) {
<div class="edit-custom-fields">
% }
% for my $CustomField ( @CustomFields ) {
% my $Type = $CustomField->Type || 'Unknown';

  <div class="form-row edit-custom-field cftype-<% $Type %>">
    <div class="label col-<% $LabelCols %>">
      <span class="<% $CustomField->EntryHint ? 'prev-icon-helper' : '' %>"><% $CustomField->Name %>:</span>\
% if ( $CustomField->EntryHint ) {
<span class="far fa-question-circle icon-helper" data-toggle="tooltip" data-placement="top" data-original-title="<% $CustomField->EntryHint %>"></span>
% }
    </div>
    <div class="value col-<% $ValueCols %>">
% my $default = $m->notes('Field-' . $CustomField->Id);
% $default ||= $ARGS{"CustomField-". $CustomField->Id };
      <& /Elements/EditCustomField,
          %ARGS,
          CustomField => $CustomField,
          Default => $default,
          Object => $Object,
      &>
%  if (my $msg = $m->notes('InvalidField-' . $CustomField->Id)) {
        <br />
        <span class="cfinvalidfield"><% $msg %></span>
%  } elsif ($ShowHints and $CustomField->FriendlyPattern) {
        <br>
        <span class="cfhints">
          <&|/l, $CustomField->FriendlyPattern &>Input must match [_1]</&>
        </span>
%  }
    </div>
% $m->callback( CallbackName => 'AfterCustomFieldValue', CustomField => $CustomField, Object => $Object, Grouping => $Grouping );
  </div>
% }

% if ( !$InTable ) {
</div>
% }
% }
% $m->callback( CallbackName => 'AfterCustomFields', Object => $Object,
%               Grouping => $Grouping, ARGSRef => \%ARGS );
<%INIT>
$CustomFields ||= $Object->CustomFields;
$CustomFields->{include_set_initial} = 1 if $ForCreation;

$CustomFields->LimitToGrouping( $Object, $Object->id && $Object->can('CategoryObj') ? $Object->CategoryObj->Name : $CategoryObj ? $CategoryObj->Name : undef, $Grouping ) if defined $Grouping;

$m->callback( %ARGS, CallbackName => 'MassageCustomFields', CustomFields => $CustomFields,
                  Object => $Object, ShowHintsRef => \$ShowHints, InTableRef => \$InTable );

$CustomFields->GotoFirstItem;
my @CustomFields;
while ( my $CustomField = $CustomFields->Next ) {
    next unless $CustomField->CurrentUserHasRight('ModifyCustomField')
             || ($ForCreation && $CustomField->CurrentUserHasRight('SetInitialCustomField'));

    push @CustomFields, $CustomField;
}
</%INIT>
<%ARGS>
$Object
$CategoryObj => undef
$CustomFields => undef
$Grouping     => undef
$InTable => 0
$LabelCols => 3
$ValueCols => 9
$ShowHints => 1
$ForCreation => 0
</%ARGS>
