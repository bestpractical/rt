%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2023 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<%ARGS>
$Name => undef
$Attr => undef
</%ARGS>
<%ONCE>
my $linkUsers = RT::Util::RecursiveSub(sub {
    my $self_cb = shift;
    my ($what, $more) = @_;
    if ($what->isa("RT::Group")) {
        # Link the users (non-recursively)
        my @ret = map {$self_cb->($_->[1], $more), ", "}
            sort {$a->[0] cmp $b->[0]}
            map {+[($_->EmailAddress||''), $_]}
            @{ $what->UserMembersObj( Recursively => 0 )->ItemsArrayRef };

        # But don't link the groups
        push @ret, map {+("Group: $_", ",")}
            sort map {$_->Name} @{ $what->GroupMembersObj( Recursively => 0)->ItemsArrayRef };

        pop @ret; # Remove ending ", "
        return @ret;
    } else {
        my @ret = \($m->scomp("/Elements/ShowUser", User => $what));
        push @ret, $more->($what) if $more;
        return @ret;
    }
});
my $COLUMN_MAP = {
    Name => {
        attribute => 'Name',
        title     => 'Name',
        value     => sub { $_[0]->Name },
        edit      => sub { return \('<input name="Name" class="form-control" value="'.$m->interp->apply_escapes( $_[0]->Name, 'h' ).'" />') },
    },
    Description => {
        attribute => 'Description',
        title     => 'Description',
        value     => sub { $_[0]->Description },
        edit      => sub { return \('<input name="Description" class="form-control" value="'.$m->interp->apply_escapes( $_[0]->Description, 'h' ).'" />') },
    },
    Catalog => {
        attribute => 'Catalog',
        title     => 'Catalog', # loc
        value     => sub { $_[0]->CatalogObj->Name },
        edit      => sub { return \($m->scomp('/Asset/Elements/SelectCatalog', Default => $_[0]->Catalog, Name => 'Catalog', ShowNullOption => 0)) },
    },
    Status => {
        title     => 'Status',
        attribute => 'Status',
        value     => sub { loc($_[0]->Status) },
        edit      => sub { return \($m->scomp("/Asset/Elements/SelectStatus", AssetObj => $_[0], Name => 'Status' ) ) },
    },
    ActiveTickets => {
        title     => 'Active tickets', # loc
        value     => sub {
            my $Asset = shift;
            my $Query = "RefersTo = 'asset:" . $Asset->id . "' AND Status = '__Active__'";
            my $SearchURL = RT->Config->Get('WebPath') . '/Search/Results.html?' . $m->comp('/Elements/QueryString', Query => $Query);
            return \'<a class="button btn btn-sm btn-primary" href="',$SearchURL,\'">Active</a>';
        }
    },
    InactiveTickets => {
        title     => 'Inactive tickets', # loc
        value     => sub {
            my $Asset = shift;
            my $Query = "RefersTo = 'asset:" . $Asset->id . "' AND Status = '__Inactive__'";
            my $SearchURL = RT->Config->Get('WebPath') . '/Search/Results.html?' . $m->comp('/Elements/QueryString', Query => $Query);
            return \'<a class="button btn btn-sm btn-primary" href="',$SearchURL,\'">Inactive</a>';
        }
    },
};

my $ranges = $m->notes('custom_date_ranges');
if ( !$ranges ) {
    $ranges = { RT::Asset->CustomDateRanges };
    $m->notes( custom_date_ranges => $ranges );
}

for my $name (keys %$ranges) {
    $COLUMN_MAP->{$name} = {
        title => $name,
        value => sub {
            $_[0]->CustomDateRange($name, $ranges->{$name});
        },
    };
}
</%ONCE>
<%init>
$m->callback( COLUMN_MAP => $COLUMN_MAP, CallbackName => 'Once', CallbackOnce => 1 );
return GetColumnMapEntry( Map => $COLUMN_MAP, Name => $Name, Attribute => $Attr );
</%init>
