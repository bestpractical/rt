%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2016 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<%INIT>

my $Type = $CustomField->Type;
unless ( $Type ) {
    # if we can't see the type, all hell will break loose.
    $RT::Logger->error( "Custom field #". $CustomField->id ." has empty type" );
    return;
}

my $Values;
if ( $Object ) {
    $Grouping =~ s/\W//g if $Grouping;

    if ( $Object->Id ) {
        $Values = $Object->CustomFieldValues( $CustomField->id );
        $Values->Columns(
            qw( id CustomField ObjectType ObjectId Disabled Content
            ContentType ContentEncoding SortOrder Creator Created
            LastUpdatedBy LastUpdated )
        );
        # Don't take care of $Values if there isn't values inside
        undef ( $Values ) unless ( $Values->Count );
    }
}

my $Name;
if ( !$NamePrefix ) {
    $Name = GetCustomFieldInputName(Object => $Object, CustomField => $CustomField, Grouping => $Grouping );
}

# Always fill $Default with submited values if it's empty
if ( ( !defined $Default || !length $Default ) && $DefaultsFromTopArguments ) {
    my %TOP = %$DECODED_ARGS;
    $Default = $TOP{ $Name } if $Name;
    # check both -Values and -Value for back compatibility
    if ( $NamePrefix ) {
        $Default //= $TOP{ $NamePrefix . $CustomField->Id . '-Values' }
            // $TOP{ $NamePrefix . $CustomField->Id . '-Value' };
    }
    else {
        my $prefix = GetCustomFieldInputNamePrefix(Object => $Object, CustomField => $CustomField, Grouping => $Grouping );
        $Default //= $TOP{ $prefix . 'Values' } // $TOP{ $prefix . 'Value' };
    }
}

my $MaxValues = $CustomField->MaxValues;
if ($MaxValues == 1 && $Values) {
    # what exactly is this doing?  Without the "unless" it breaks RTFM
    # transaction extraction into articles.
    $Default = ($Values->First ? $Values->First->Content : '') unless $Default;
    $Values->GotoFirstItem;
}
# The "Magic" hidden input causes RT to know that we were trying to edit the field, even if 
# we don't see a value later, since browsers aren't compelled to submit empty form fields
$m->out("\n".'<input type="hidden" class="hidden" name="'
        . ($Name ? $m->interp->apply_escapes($Name, 'h') : $m->interp->apply_escapes($NamePrefix, 'h').$CustomField->Id.'-Values')
        . '-Magic" value="1" />'."\n");


my $EditComponent = "EditCustomField$Type";
$m->callback( %ARGS, CallbackName => 'EditComponentName', Name => \$EditComponent, CustomField => $CustomField, Object => $Object, Rows => \$Rows, Cols => \$Cols);
$EditComponent = "EditCustomField$Type" unless $m->comp_exists($EditComponent);

return $m->comp(
    $EditComponent,
    %ARGS,
    Rows => $Rows,
    Cols => $Cols,
    Default => $Default,
    Object => $Object,
    Values => $Values,
    MaxValues => $MaxValues,
    Multiple => ($MaxValues != 1),
    NamePrefix => $NamePrefix,
    CustomField => $CustomField,
    Name => $Name,
    $CustomField->BasedOn && $Name ? ( BasedOnName => GetCustomFieldInputName(Object => $Object, CustomField => $CustomField->BasedOnObj, Grouping => $Grouping) ) : (),
);
</%INIT>
<%ARGS>
$Grouping    => undef
$Object      => undef
$CustomField => undef
$NamePrefix  => undef
$Rows        => 5
$Cols        => 15
$Default     => undef
$DefaultsFromTopArguments => 1,
</%ARGS>
