%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2024 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<%ARGS>
$Object
$ShowHeaders       => 0
$ShowTitle         => 1
$ShowDisplayModes  => 1
$ScrollShowHistory => 0
$SingleTransaction => 0
$Title             => loc('History')
</%ARGS>
<%INIT>
my $record_type = $Object->RecordType;
my $histid      = "\L$record_type\E-" . $Object->id . "-history";
my $container_id = 'history-container-' . Digest::MD5::md5_hex(time . {} . $$ . rand(1024));
</%INIT>
<div class="history <% lc $record_type %>" id="<% $histid %>">
<%perl>
if ( $ShowDisplayModes or $ShowTitle or $ScrollShowHistory ) {
    my $title = $ShowTitle ? $Title : '&nbsp;';
    my @elements;
    if ( $ScrollShowHistory ) {
        push( @elements, qq{<span id="LoadAllHistoryContainer">} .
                         qq{<a href="#" id="LoadAllHistory">} .
                         loc('Load all history') .
                         qq{</a>} .
                         qq{</span>} );
    }

    if ( $ShowDisplayModes ) {
        if ( RT->Config->Get( 'QuoteFolding', $session{CurrentUser} ) ) {
            my $open_all  = $m->interp->apply_escapes( loc("Show all quoted text"), 'j' );
            my $open_html = $m->interp->apply_escapes( loc("Show all quoted text"), 'h' );
            my $close_all = $m->interp->apply_escapes( loc("Hide all quoted text"), 'j' );
            push( @elements, qq{<a href="#" data-direction="open" } .
                             qq{onclick="return toggle_all_folds(this, $open_all, $close_all);"} .
                             qq{>$open_html</a>} );
        }

        if ($ShowHeaders) {
            push( @elements, qq{<a href="?ForceShowHistory=1;id=} .
                             $Object->id.qq{#$histid">} .
                             loc("Show brief headers") .
                             qq{</a>} );
        } else {
            push( @elements, qq{<a href="?ForceShowHistory=1;ShowHeaders=1;id=} .
                             $Object->id.qq{#$histid">} .
                             loc("Show full headers") .
                             qq{</a>} );
        }
    }

    # Don't need to reverse history when showing a single transaction
    unless ( $SingleTransaction ) {
        my $href = $ARGS{ReverseHistoryOrderLink} || do {
            my $reverse_txns = $ARGS{'ReverseTxns'} // $DECODED_ARGS->{ReverseTxns};
            if ($reverse_txns) {

                # If we got something, reverse it for the link
                $reverse_txns = $reverse_txns eq 'ASC' ? 'DESC' : 'ASC';
            }
            else {
                # Default the link to the opposite of the config setting
                # Oldest Txns first is ASC, so reverse it for this option default
                $reverse_txns
                    = RT->Config->Get( "OldestTransactionsFirst", $session{'CurrentUser'} ) ? 'DESC' : 'ASC';
            }
            qq{?ForceShowHistory=1;ReverseTxns=$reverse_txns;id=} . $Object->id;
        };
        push @elements, qq{<a href="$href#$histid">} . loc("Reverse history order") . qq{</a>};
    }

    my $titleright;
    if ( @elements ) {
        # build the new link
        my $alt = loc('Options');
        $titleright = qq{<div class="rt-inline-icon dropdown border rounded" data-bs-toggle="tooltip" data-bs-title="}
        . loc('Options') . qq{"><a id="history-dropdown" class="menu-item" href="#" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">}
        . GetSVGImage(Name => 'gear')
        . qq{</a><ul class="dropdown-menu dropdown-menu-end">};

        # foreach of the elements, build a new <li>$element</li> and append to the output.
        foreach my $element ( @elements ) {
            $titleright .= qq{<li class="dropdown-item">$element</li>};
        }

        $titleright .= q{</ul></div>};
    }

</%perl>
% $m->callback( CallbackName => 'BeforeTitle', %ARGS, title => \$title, titleright => \$titleright, ARGSRef => \%ARGS );
<& /Widgets/TitleBoxStart, title => $title, titleright_raw => $titleright, class => 'fullwidth' &>
% }

% my $url = '';
% if ( $Object->isa('RT::Ticket') || $Object->isa('RT::Asset') ) {

<%perl>
my %params = map { $_ => $ARGS{$_} } grep { !ref $ARGS{$_} } keys %ARGS;
$url
    = RT->Config->Get('WebPath')
    . "/Helpers/"
    . ( $Object->isa('RT::Ticket') ? 'Ticket' : 'Asset' )
    . "HistoryPage?"
    . $m->comp( '/Elements/QueryString', %params, id => $Object->id );

my $oldestTransactionsFirst;
if ( my $reverse_txns = $ARGS{ReverseTxns} // $DECODED_ARGS->{ReverseTxns} ) {
    $oldestTransactionsFirst = $reverse_txns eq 'ASC' ? 1 : 0;
}
else {
    $oldestTransactionsFirst = RT->Config->Get("OldestTransactionsFirst", $session{CurrentUser});
}
</%perl>

<script type="text/javascript">
jQuery(function(){
    var container = document.getElementById(<% $container_id | j%>);
    container.setAttribute('data-oldest-transactions-first', '<% $oldestTransactionsFirst %>');
% if ( !$ScrollShowHistory ) {
    container.setAttribute('data-disable-scroll-loading', '');
% }
    var isLoading = false, // prevent multiple simultaneous load events
        loadDistanceFromBottom = 1500, // to load before bottom of page is reached
        lastTransactionId = null,
        hash = window.location.hash,
        hashTransactionId = null,
        loadAll = false;

    var oldestTransactionsFirst = <% $oldestTransactionsFirst || 0 %>;

    var removeLoadingMessage = function() {
        jQuery('.loading-message').remove();
    };

    var removeLoadLink = function() {
        jQuery('.error-load-history').remove();
    };

    var showLoadingMessage = function() {
        removeLoadingMessage();
        var loadingMessage = jQuery('<span class="loading-message">' +
            loc_key('loading') + '</span>');
        jQuery(".history-container").append(loadingMessage);
    };

    var loadingError = function(reason) {
        removeLoadingMessage();
        container.setAttribute('data-disable-scroll-loading', '');
        removeLoadLink();
        var loadLink = jQuery('<div class="error-load-history">' +
            loc_key('history_scroll_error') + ' ' + reason +
            '<br/><a href="#">' + loc_key('try_again') + '</a></div>');
        jQuery(".history-container").append(loadLink);
    };

    var loadHistoryPage = function() {
        container = document.getElementById(<% $container_id |j %>);
        if (isLoading || !container || container.hasAttribute('data-disable-scroll-loading')) return;

        isLoading = true;
        showLoadingMessage();

        var queryString = '&oldestTransactionsFirst=' + oldestTransactionsFirst;
        var lastTransaction = container.querySelector('.transaction:last-of-type');
        if ( lastTransaction ) {
            lastTransactionId = lastTransaction.dataset.transactionId;
        }
        if (lastTransactionId) queryString += '&lastTransactionId=' + lastTransactionId;
        if (loadAll) queryString += '&loadAll=1';

        // don't load all over and over again
        loadAll = false;

        // check for link to specific transaction and make sure we load enough to focus it
        if (hash && !lastTransactionId) {
            var matches = hash.match(/^#txn-(\d+)$/);
            if (matches) {
                hashTransactionId = matches[1];
                queryString += '&focusTransactionId=' + hashTransactionId;
            }
        }

        jQuery.ajax({
            url: "<% $url |n %>" + queryString,
            success: function(html) {
                var transactions = jQuery(html).filter('div.transaction');
                if(html && transactions.length) {
                    jQuery(".history-container").append(html);
                    ReplaceUserReferences();
                    if ( transactions.filter(':not(.hidden.end-of-history-list)').length == 0 ) {
                        // if none is visible, automatically load more
                        isLoading = false;
                        loadHistoryPage();
                        return;
                    }

                    if( jQuery(document).height() <= jQuery(window).height() + loadDistanceFromBottom ) {
                        // if there are still space left, automatically load more
                        isLoading = false;
                        loadHistoryPage();
                        return;
                    }

                    if (hashTransactionId) { // focus transaction if we are following a link to it
                        hashTransactionId = null;
                        location.href = hash;
                    }
                } else {
                    container.setAttribute('data-disable-scroll-loading', '');

                    // hide 'Load All' link container if we're done loading
                    var loadAllHistoryContainer = jQuery('#LoadAllHistoryContainer');
                    loadAllHistoryContainer.hide();
                }

                isLoading = false;
                removeLoadingMessage();

                // make sure we load all if we clicked the "Load All" button while we were already loading
                if (loadAll) loadHistoryPage();
            },
            error: function(xhr, reason) {
                isLoading = false;
                loadingError(reason);
            }
        });
    };

    jQuery(window).scroll(function() {
        if(jQuery(window).scrollTop() >= jQuery(document).height() - jQuery(window).height() - loadDistanceFromBottom) {
            loadHistoryPage();
        }
    });

    jQuery('.history-container').on('click', '.error-load-history a', function(e) {
        e.preventDefault();
        removeLoadLink();
        container.removeAttribute('data-disable-scroll-loading');
        loadHistoryPage();
    });

% if ( $ScrollShowHistory ) {

    var loadAllHistory = function() {
        // hide link container
        var loadAllHistoryContainer = jQuery('#LoadAllHistoryContainer');
        loadAllHistoryContainer.hide();
        loadAll = true;
        loadHistoryPage();
    };

    jQuery('div.history').on('click', '#LoadAllHistory', function(e) {
        e.preventDefault();
        loadAllHistory();
    });

    loadHistoryPage();

    // Catch clicks on unread messages buttons and load any messages not loaded "on scroll"
    jQuery('.new-messages-buttons > a').on('click', function (e) {
        var link = jQuery(this);
        if ( link[0].hash ) {
            hash = link[0].hash;
            lastTransactionId = null;
            loadHistoryPage();
        }
        return true;
    });
% }

});
</script>
% }

<div class="history-container" data-url="<% $url %>" id="<% $container_id %>">
