%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2019 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<%ARGS>
$Object
$ReverseTransactionOrder => 0
$Transactions      => $Object->SortedTransactions( $ReverseTransactionOrder )
$Attachments       => $Object->Attachments( WithHeaders => 1 )
$AttachmentContent => $Object->TextAttachments

$ShowHeaders       => 0

$PathPrefix        => ''
</%ARGS>
<%INIT>
my $trans_content = {};
my $trans_attachments = {};

for my $content (@{$AttachmentContent->ItemsArrayRef()}) {
    $trans_content->{$content->TransactionId}->{$content->Id} = $content;
}

for my $attachment (@{$Attachments->ItemsArrayRef()}) {
    my $tmp = $trans_attachments->{ $attachment->TransactionId } ||= {};
    push @{ $tmp->{ $attachment->Parent || 0 } ||= [] }, $attachment;
}

{
    my %tmp = (
        AttachmentPath  => 'Attachment',
        UpdatePath      => 'Update.html',
        ForwardPath     => 'Forward.html',
        EmailRecordPath => 'ShowEmailRecord.html',
        EncryptionPath  => 'Crypt.html',
    );

    my $prefix = $ARGS{PathPrefix}||'';
    while ( my ($arg, $path) = each %tmp ) {
        next if defined $ARGS{ $arg };
        $ARGS{ $arg } = $prefix.$path;
    }
}

my $HasTxnCFs = ($Object->can("TransactionCustomFields") and $Object->TransactionCustomFields->Count);
</%INIT>
<%perl>
my $i = 1;
while ( my $Transaction = $Transactions->Next ) {
    my $skip = 0;

    # Skip display of SetWatcher transactions for ticket Owner groups.  Owner
    # was a single member role group and denormalized into a column well before
    # the generic role group handling and transactions came about.  For
    # tickets, we rely on rendering ownership changes using the Set-Owner
    # transaction.  For all other record types, or even potential ticket single
    # role groups which aren't Owner, we use SetWatcher to render history and
    # skip the Set transactions.  This complication is necessary to avoid
    # creating backdated transactions on upgrade which normalize to one type or
    # another.
    # 
    # These conditions assumes ticket Owner is a single-member denormalized
    # role group, which is safe since that is unlikely to ever change in the
    # future.
    if ($Object->isa("RT::Ticket") and ($Transaction->Field || '') eq "Owner") {
        $skip = 1 if $Transaction->Type eq "SetWatcher";
    } else {
        $skip = 1 if $Transaction->Type eq "Set"
                 and $Transaction->Field
                 and $Object->DOES("RT::Record::Role::Roles")
                 and $Object->HasRole( $Transaction->Field )
                 and $Object->RoleGroup( $Transaction->Field )->SingleMemberRoleGroupColumn;
    }

    # Skip Time Worked fields if user is unprivileged and
    # HideTimeFieldsFromUnprivilegedUsers is set.
    $skip = 1 if $Object->isa("RT::Ticket") and
                 not $Object->CurrentUserCanSeeTime and
                 ($Transaction->Field || '') =~ /^Time(?:Estimated|Worked|Left)$/;

    $skip = 1 if $m->request_path =~ m{^/SelfService/}
        and RT::Config->Get('SelfServiceCorrespondenceOnly')
        and ($Transaction->Type ne "Correspond" && $Transaction->Type ne "Create");

    $m->callback(
        %ARGS,
        Transaction   => $Transaction,
        skip          => \$skip,
        CallbackName  => 'SkipTransaction',
    );
    next if $skip;

    # ARGS is first because we're clobbering the "Attachments" parameter
    $m->comp( 'ShowTransaction',
        %ARGS,
        Object            => $Object,
        Transaction       => $Transaction,
        ShowHeaders       => $ShowHeaders,
        RowNum            => $i,
        Attachments       => $trans_attachments->{$Transaction->id} || {},
        AttachmentContent => $trans_content,
        HasTxnCFs         => $HasTxnCFs,
    );

    # manually flush the content buffer after each txn,
    # so the user sees some update
    $m->flush_buffer;

    $i++;
}

# For scroll, it's possible that all the transactions in this page were
# skipped for some reasons and there are still pages left, so we need to
# inform AJAX request that it's not done yet.

if ( $i == 1 and RT->Config->Get( "ShowHistory", $session{'CurrentUser'} ) eq 'scroll' and my $txn = $Transactions->Last ) {
    $m->out( q{<div class="hidden end-of-history-list transaction" data-transaction-id="} . $txn->id . qq{"></div>\n} );
}

</%perl>

