%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2022 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
% $m->callback( CallbackName => 'BeforeCustomFields', Object => $Object,
%               ARGSRef => \%ARGS, CustomFields => $CustomFields);
<div>
% while ( my $CustomField = $CustomFields->Next ) {
% my $Values = $Object->CustomFieldValues( $CustomField->Id );
% my $count = $Values->Count;
% next if $HideEmpty and not $count;
% my $CustomFieldName = $CustomField->Name;
%#The following substitution replaces all non-ID_Continue characters with a dash character. The ID_Continue Unicode property was chosen because it (combined with ID_Start) is meant for variable names. ID_Continue includes characters suitable for use in CSS-class names (even non-Latin ones, to support non-English custom field names) and excludes syntactic characters that are not (such as whitespace characters).
% $CustomFieldName =~ s/\P{ID_Continue}+/-/g;
% my @classes = (
%   'custom-field',
%   'custom-field-'.$CustomField->id,
%   'custom-field-'.$CustomFieldName,
%   'article-custom-field',
% );
% push @classes, 'unset-field' if not $count;
% $m->callback( CallbackName => 'ModifyFieldClasses', CustomField => $CustomField,
%               Object => $Object, Classes => \@classes );
  <div class="form-row <% join(' ', @classes) %>" id="CF-<%$CustomField->id%>-ShowRow">
% if ($HideFieldNames->{$CustomField->id}) {
    <div class="value col-12 <% $count ? '' : ' no-value' %>">
%} else {
    <div class="label col-3"><% $CustomField->Name %>:</div>
    <div class="value col-9 <% $count ? '' : ' no-value' %>">
% }
      <span class="current-value">
% unless ( $count ) {
<&|/l&>(no value)</&>
% } elsif ( $count == 1 ) {
%   $print_value->( $CustomField, $Values->First );
% } else {
<ul class="list-group list-group-compact">
% while ( my $Value = $Values->Next ) {
<li class="list-group-item">
% $print_value->( $CustomField, $Value );
</li>
% }
</ul>
% }
      </span>
    </div>
% $m->callback( CallbackName => 'AfterCustomFieldValue', CustomField => $CustomField,
%               Object => $Object );
  </div>
% }
</div>
% $m->callback( CallbackName => 'AfterCustomFields', Object => $Object,
%               ARGSRef => \%ARGS );
<%INIT>
$m->callback(
    %ARGS,
    CallbackName => 'MassageCustomFields',
    Object       => $Object,
    CustomFields => $CustomFields,
);

# don't print anything if there are no custom fields
return unless $CustomFields->First;
$CustomFields->GotoFirstItem;

my $print_value = sub {
    my ($cf, $value) = @_;

    my $comp = "ShowCustomField". $cf->Type;
    $m->callback(
        CallbackName => 'ShowComponentName',
        Name         => \$comp,
        CustomField  => $cf,
        Object       => $Object,
    );
    if ( $m->comp_exists( $comp ) ) {
        $m->comp( $comp, Object => $value );
    } else {
        $m->out( $m->interp->apply_escapes( $value->Content, 'h' ) );
    }
};

</%INIT>
<%ARGS>
$Object => undef
$CustomFields => $Object->CustomFields
$HideEmpty => 0
$HideFieldNames => {}
</%ARGS>
