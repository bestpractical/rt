%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2023 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<%ARGS>
$i => undef
@Format => undef
$record => undef
$maxitems => undef
$Depth => undef
$Warning => undef
$ColumnMap => {}
$Class     => 'RT::Tickets'
$Classes => ''
$InlineEdit => 0
</%ARGS>
<%init>

my $column_map_class;
if ( $Class =~ /::/ ) {
    $column_map_class = $Class->ColumnMapClassName;
}
else {
    $column_map_class = $Class;
}

$m->out( '<tbody class="list-item" data-index="'.$m->interp->apply_escapes($i, 'h').'" ' . ( $record->can('id') ? ' data-record-id="'.$record->id.'"' : '' )  . ( $Warning ? ' data-warning=1' : ''). '>' );

$m->out(  '<tr class="' . $m->interp->apply_escapes($Classes, 'h') . ' '
        . ( $Warning ? 'warnline' : $i % 2 ? 'oddline' : 'evenline' ) . '" >'
        . "\n" );
my $item;
foreach my $column (@Format) {
    if ( defined $column->{title} && $column->{title} eq 'NEWLINE' ) {
        while ( $item < $maxitems ) {
            $m->out(qq{<td class="collection-as-table">&nbsp;</td>\n});
            $item++;
        }
        $item = 0;
        $m->out( '</tr>' . "\n" );
        $m->out(  '<tr class="' . $Classes . ' '
                . ( $Warning ? 'warnline' : $i % 2 ? 'oddline' : 'evenline' )
                . '" >'
                . "\n" );
        next;
    }

    my $class = $column->{class} ? $m->interp->apply_escapes($column->{class}, 'h') : 'collection-as-table';

    my %attrs;
    my @possible_attrs = qw(style align);
    if ($InlineEdit && $record->isa('RT::Ticket') && $record->CurrentUserHasRight('ModifyTicket')) {
        push(@possible_attrs, 'edit');
    }
    foreach my $attr (@possible_attrs) {
        if ( defined $column->{ $attr } ) {
            $attrs{ $attr } = $column->{ $attr };
            next;
        }

        # if it's not defined then use column map
        my $col = $column->{'attribute'} || $column->{'last_attribute'};
        unless ( exists $ColumnMap->{$col}{$attr} ) {
            next unless $col;

            $ColumnMap->{$col}{$attr} = $m->comp(
                "/Elements/ColumnMap",
                Class => $column_map_class,
                Name  => $col,
                Attr  => $attr,
            );
        }
        $attrs{ $attr } = ProcessColumnMapValue(
            $ColumnMap->{$col}{$attr},
            Arguments => [$record, $i],
            Escape => 0,
        );
    }

    $attrs{colspan} = $column->{span};
    $item += ($attrs{'colspan'} || 1);

    if ($attrs{edit}) {
        $class .= ' editable';
    }

    my @out;
    foreach my $subcol ( @{ $column->{output} } ) {
        my ($col) = ($subcol =~ /^__(.*?)__$/);
        unless ( $col ) {
            push @out, $subcol;
            next;
        }

        unless ( exists $ColumnMap->{$col}{'value'} ) {
            $ColumnMap->{$col}{'value'} = $m->comp(
                "/Elements/ColumnMap",
                Class => $column_map_class,
                Name  => $col,
                Attr  => 'value'
            );
        }

        push @out, ProcessColumnMapValue(
            $ColumnMap->{$col}{'value'},
            Arguments => [$record, $i],
        );
    }

    $m->callback(
        CallbackName => 'EachField',
        Record       => $record,
        Format       => \@Format,
        Column       => $column,
        Classes      => \$class,
        Align        => \$attrs{align},
        Style        => \$attrs{style},
        Colspan      => \$attrs{colspan},
        Edit         => \$attrs{edit},
        Out          => \@out,
    );

    $m->out(qq{<td class="$class" });

    $m->out( $_ .'="'. $m->interp->apply_escapes( $attrs{$_} => 'h' ) .'"' )
        foreach grep $attrs{$_}, qw(align style colspan);

    $m->out('>');

    if ( $attrs{edit} ) {
        $m->out( '<form method="POST" action="' . RT->Config->Get('WebPath') . '/Helpers/TicketUpdate?id=' . $record->id . '" class="editor" autocomplete="off">' );
        $m->out( $attrs{edit} );
        $m->out( '<span class="cancel text-danger far fa-times-circle" data-toggle="tooltip" data-placement="left" data-original-title="' . loc('Cancel') . '"></span>' );
        $m->out( '<span class="submit text-success far fa-check-circle" data-toggle="tooltip" data-placement="right" data-original-title="' . loc('Save') . '"></span>' );
        $m->out('<div class="spinner-border spinner-border-sm loading" role="status"><span class="sr-only">Loading...</span></div>');
        $m->out('</form>');
        $m->out('<div class="value"><span>');
    }

    $m->out(@out) if @out;

    if ( $attrs{edit} ) {
        $m->out(  '</span> <span class="fas fa-pencil-alt edit-icon" data-toggle="tooltip" data-placement="left" data-original-title="'
                . loc('Edit')
                . '"></span></div>' );
    }

    $m->out( '</td>' . "\n" );
}

# Fill up the last row, like how NEWLINE is handled above
while ( $item < $maxitems ) {
    $m->out(qq{<td class="collection-as-table">&nbsp;</td>\n});
    $item++;
}

$m->out('</tr>');
$m->out('</tbody>');
</%init>
