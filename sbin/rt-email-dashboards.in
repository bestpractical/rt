#!@PERL@
# BEGIN BPS TAGGED BLOCK {{{
#
# COPYRIGHT:
#
# This software is Copyright (c) 1996-2016 Best Practical Solutions, LLC
#                                          <sales@bestpractical.com>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# END BPS TAGGED BLOCK }}}
use strict;
use warnings;

# fix lib paths, some may be relative
BEGIN { # BEGIN RT CMD BOILERPLATE
    require File::Spec;
    require Cwd;
    my @libs = ("@RT_LIB_PATH@", "@LOCAL_LIB_PATH@");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            $bin_path ||= ( File::Spec->splitpath(Cwd::abs_path(__FILE__)) )[1];
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }

}

# Read in the options
my %opts;
use Getopt::Long;
GetOptions( \%opts,
    "help|h", "dryrun", "time=i", "epoch=i", "all", "log=s"
);

if ($opts{'help'}) {
    require Pod::Usage;
    print Pod::Usage::pod2usage(-verbose => 2);
    exit;
}

require RT;
require RT::Interface::CLI;
RT::Interface::CLI->import(qw{ loc });

# Load the config file
RT::LoadConfig();

# adjust logging to the screen according to options
RT->Config->Set( LogToSTDERR => $opts{log} ) if $opts{log};

# Connect to the database and get RT::SystemUser and RT::Nobody loaded
RT::Init();

require RT::Dashboard::Mailer;
RT::Dashboard::Mailer->MailDashboards(
    All    => $opts{all},
    DryRun => $opts{dryrun},
    Time   => ($opts{time} || $opts{epoch} || time), # epoch is the old-style
    Opts   => \%opts,
);

=head1 NAME

rt-email-dashboards - Send email dashboards

=head1 SYNOPSIS

    rt-email-dashboards [options]

=head1 DESCRIPTION

This tool will send users email based on how they have subscribed to
dashboards. A dashboard is a set of saved searches, the subscription controls
how often that dashboard is sent and how it's displayed.

Each subscription has an hour, and possibly day of week or day of month. These
are taken to be in the user's timezone if available, UTC otherwise.

=head1 SETUP

You'll need to have cron run this script every hour. Here's an example crontab
entry to do this.

    0 * * * * @RT_SBIN_PATH_R@/rt-email-dashboards

This will run the script every hour on the hour. This may need some further
tweaking to be run as the correct user.

=head1 OPTIONS

This tool supports a few options. Most are for debugging.

=over 8

=item -h

=item --help

Display this documentation

=item --dryrun

Figure out which dashboards would be sent, but don't actually generate or email
any of them

=item --time SECONDS

Instead of using the current time to figure out which dashboards should be
sent, use SECONDS (usually since midnight Jan 1st, 1970, so C<1192216018> would
be Oct 12 19:06:58 GMT 2007).

=item --epoch SECONDS

Back-compat for --time SECONDS.

=item --all

Ignore subscription frequency when considering each dashboard (should only be
used with --dryrun for testing and debugging)

=item --log LEVEL

Adjust LogToSTDERR config option

=back

=cut

